webpackHotUpdate(0,{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Map/Leaflet/Leaflet.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Map/Leaflet/Leaflet.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_dev_sp_frontend_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet */ \"./node_modules/leaflet/dist/leaflet-src.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vue2-leaflet */ \"./node_modules/vue2-leaflet/dist/vue2-leaflet.es.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Const__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Const */ \"./src/components/Map/Leaflet/L.Const.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Marker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Marker */ \"./src/components/Map/Leaflet/L.Marker.js\");\n/* harmony import */ var vue2_leaflet_markercluster__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vue2-leaflet-markercluster */ \"./node_modules/vue2-leaflet-markercluster/dist/Vue2LeafletMarkercluster.js\");\n/* harmony import */ var vue2_leaflet_markercluster__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(vue2_leaflet_markercluster__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var vue2_leaflet_polyline_measure__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vue2-leaflet-polyline-measure */ \"./node_modules/vue2-leaflet-polyline-measure/LControlPolylineMeasure.vue\");\n/* harmony import */ var _components_Map_Leaflet_L_Marker_Pulse__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Marker.Pulse */ \"./src/components/Map/Leaflet/L.Marker.Pulse.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Marker_Pulse__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_components_Map_Leaflet_L_Marker_Pulse__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _components_Map_Leaflet_proj4__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/Map/Leaflet/proj4 */ \"./src/components/Map/Leaflet/proj4.js\");\n/* harmony import */ var _components_Map_Leaflet_proj4__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_components_Map_Leaflet_proj4__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _components_Map_Leaflet_L_Proj4leaflet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Proj4leaflet */ \"./src/components/Map/Leaflet/L.Proj4leaflet.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Proj4leaflet__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_components_Map_Leaflet_L_Proj4leaflet__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _plugins_sys__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/plugins/sys */ \"./src/plugins/sys.js\");\n/* harmony import */ var _components_Map_Leaflet_Edit__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/Map/Leaflet/Edit */ \"./src/components/Map/Leaflet/Edit.vue\");\n/* harmony import */ var _components_Map_Leaflet_Menu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/Map/Leaflet/Menu */ \"./src/components/Map/Leaflet/Menu.vue\");\n/* harmony import */ var _components_Map_Leaflet_Range__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/Map/Leaflet/Range */ \"./src/components/Map/Leaflet/Range.vue\");\n/* harmony import */ var _components_Map_Leaflet_Legend__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @/components/Map/Leaflet/Legend */ \"./src/components/Map/Leaflet/Legend.vue\");\n/* harmony import */ var _components_Map_Leaflet_Logo__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @/components/Map/Leaflet/Logo */ \"./src/components/Map/Leaflet/Logo.vue\");\n/* harmony import */ var _components_Map_Leaflet_L_Mix_Key__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Mix.Key */ \"./src/components/Map/Leaflet/L.Mix.Key.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Mix_FeatureColor__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Mix.FeatureColor */ \"./src/components/Map/Leaflet/L.Mix.FeatureColor.js\");\n/* harmony import */ var _components_Map_Leaflet_L_Mix_Control__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @/components/Map/Leaflet/L.Mix.Control */ \"./src/components/Map/Leaflet/L.Mix.Control.js\");\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // устранение бага с путями\n\ndelete leaflet__WEBPACK_IMPORTED_MODULE_4__[\"Icon\"].Default.prototype._getIconUrl;\nleaflet__WEBPACK_IMPORTED_MODULE_4__[\"Icon\"].Default.mergeOptions({\n  iconRetinaUrl: __webpack_require__(/*! leaflet/dist/images/marker-icon-2x.png */ \"./node_modules/leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: __webpack_require__(/*! leaflet/dist/images/marker-icon.png */ \"./node_modules/leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: __webpack_require__(/*! leaflet/dist/images/marker-shadow.png */ \"./node_modules/leaflet/dist/images/marker-shadow.png\")\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"Leaflet\",\n  mixins: [_components_Map_Leaflet_L_Mix_Key__WEBPACK_IMPORTED_MODULE_19__[\"default\"], _components_Map_Leaflet_L_Mix_FeatureColor__WEBPACK_IMPORTED_MODULE_20__[\"default\"], _components_Map_Leaflet_L_Mix_Control__WEBPACK_IMPORTED_MODULE_21__[\"default\"]],\n  components: {\n    LMap: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LMap\"],\n    LTileLayer: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LTileLayer\"],\n    LMarker: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LMarker\"],\n    LPopup: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LPopup\"],\n    LTooltip: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LTooltip\"],\n    LFeatureGroup: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LFeatureGroup\"],\n    LLayerGroup: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LLayerGroup\"],\n    LGeoJson: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LGeoJson\"],\n    LPolyline: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LPolyline\"],\n    LPolygon: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LPolygon\"],\n    LControlScale: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LControlScale\"],\n    LControl: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LControl\"],\n    LIcon: vue2_leaflet__WEBPACK_IMPORTED_MODULE_5__[\"LIcon\"],\n    'l-marker-cluster': vue2_leaflet_markercluster__WEBPACK_IMPORTED_MODULE_8___default.a,\n    LControlPolylineMeasure: vue2_leaflet_polyline_measure__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    Edit: _components_Map_Leaflet_Edit__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    Menu: _components_Map_Leaflet_Menu__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    Range: _components_Map_Leaflet_Range__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n    Legend: _components_Map_Leaflet_Legend__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n    Logo: _components_Map_Leaflet_Logo__WEBPACK_IMPORTED_MODULE_18__[\"default\"]\n  },\n  data: function data() {\n    return {\n      menu: {\n        visible: false,\n        x: 0,\n        y: 0\n      },\n      hover_map_ind: -1,\n      // MAP_ITEM[hover_map_ind]                   - блок, над которым находится курсор\n      hover_feature_ind: -1,\n      // MAP_ITEM[].FC.features[hover_feature_ind] - фигура, над которой находится курсор\n      mapOptions: {\n        zoomControl: false,\n        zoomSnap: 0.5\n      }\n    };\n  },\n  computed: Object(_home_dev_sp_frontend_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, Object(vuex__WEBPACK_IMPORTED_MODULE_3__[\"mapGetters\"])(['MAP_GET_KEY', 'MAP_GET_RANGE_SEL', 'MAP_GET_TILES', 'MAP_GET_TILE', 'MAP_GET_SCALE', 'MAP_GET_MEASURE', 'MAP_GET_CLUSTER', 'MAP_GET_HINT', 'SCRIPT_GET', 'SCRIPT_GET_ITEM_COLOR', 'SCRIPT_GET_ITEM_MARKER', 'SCRIPT_GET_ITEM_LINE', 'SCRIPT_GET_ITEM_POLYGON', 'SCRIPT_GET_ITEM_ICON'])),\n  methods: {\n    // ...mapActions([\n    //   'MAP_ACT_RANGE_TS',\n    // ]),\n    // ===============\n    // MENU\n    // ===============\n    menu_show: function menu_show(e) {\n      var _this = this;\n\n      e.originalEvent.preventDefault();\n      e.originalEvent.stopPropagation();\n      this.menu.visible = false;\n      this.menu.x = e.originalEvent.clientX;\n      this.menu.y = e.originalEvent.clientY;\n      this.$nextTick(function () {\n        _this.menu.visible = true;\n      });\n    },\n    menu_options: function menu_options() {\n      return {\n        visible: this.menu.visible,\n        x: this.menu.x,\n        y: this.menu.y\n      };\n    },\n    // ===============\n    // MEASURE\n    // ===============\n    measure_options: function measure_options() {\n      var COLOR = '#494'; // цвет маркеров и линий\n\n      return {\n        position: 'topleft',\n        unit: 'metres',\n        measureControlClasses: ['select_off'],\n        clearMeasurementsOnStop: true,\n        measureControlTitleOn: 'Рулетка: включить',\n        measureControlTitleOff: 'Рулетка: выключить',\n        tooltipTextDelete: 'Нажмите  SHIFT и кликните мышкой для <b>удаления точки</b>',\n        tooltipTextResume: '<br>Нажмите CTRL и кликните мышкой для <b>продолжения линии</b>',\n        tooltipTextAdd: 'Нажмите CTRL и кликните мышкой для <b>добавления точки</b>',\n        tooltipTextFinish: '',\n        tooltipTextMove: '',\n        backgroundColor: '#dfd',\n        tempLine: {\n          color: COLOR,\n          weight: 2\n        },\n        fixedLine: {\n          color: COLOR,\n          weight: 2\n        },\n        startCircle: {\n          color: COLOR,\n          weight: 1,\n          fillColor: '#0f0',\n          fillOpacity: 1,\n          radius: 5\n        },\n        intermedCircle: {\n          color: COLOR,\n          weight: 1,\n          fillColor: '#ff0',\n          fillOpacity: 1,\n          radius: 5\n        },\n        currentCircle: {\n          color: COLOR,\n          weight: 1,\n          fillColor: '#f0f',\n          fillOpacity: 1,\n          radius: 5\n        },\n        endCircle: {\n          color: COLOR,\n          weight: 1,\n          fillColor: '#f00',\n          fillOpacity: 1,\n          radius: 5\n        }\n      };\n    },\n    // ===============\n    // RANGE\n    // ===============\n    range_options: function range_options() {\n      return {};\n    },\n    // ===============\n    // LEGEND\n    // ===============\n    legend_options: function legend_options() {\n      return {\n        hover_map_ind: this.hover_map_ind,\n        hover_feature_ind: this.hover_feature_ind\n      };\n    },\n    legend_hide: function legend_hide() {\n      this.hover_map_ind = -1;\n      this.hover_feature_ind = -1;\n    },\n    // ===============\n    // MAP\n    // ===============\n    // корректировать данные\n    data_normalize: function data_normalize(map_ind) {\n      // рассчитать цвета (легенда, цвет от значения в группе)\n      this.data_normalize_color(map_ind); // deep copy\n\n      var item = this.SCRIPT_GET_ITEM(map_ind);\n      var fc = item[_components_Map_Leaflet_L_Const__WEBPACK_IMPORTED_MODULE_6__[\"MAP_ITEM\"].FC];\n      fc = JSON.parse(JSON.stringify(fc)); // установить fc.features[ind].ind - порядковый номер фигуры в fc\n\n      for (var ind = 0; ind < fc.features.length; ind++) {\n        fc.features[ind].ind = ind;\n      } // отфильтровать с допустимыми датами\n\n\n      var range_ts = this.MAP_GET_RANGE_SEL;\n\n      if (range_ts[0] > 0 && range_ts[1] > 0) {\n        var item_date;\n        var features = fc.features.filter(function (item) {\n          if (!item.properties.date) return true;\n          item_date = Object(_plugins_sys__WEBPACK_IMPORTED_MODULE_13__[\"datesql_to_ts\"])(item.properties.date);\n          return item_date >= range_ts[0] && item_date <= range_ts[1];\n        });\n        fc.features = features;\n      }\n\n      return fc;\n    },\n    cluster_options: function cluster_options(map_ind) {\n      return {\n        // область при наведении курсора на кластер\n        showCoverageOnHover: true,\n        polygonOptions: {\n          color: this.SCRIPT_GET_ITEM_COLOR(map_ind)\n        },\n        // для последующей коррекции цвета маркеров\n        cluster_color: this.SCRIPT_GET_ITEM_COLOR(map_ind),\n        // увеличение, при котором создавать кластеры\n        disableClusteringAtZoom: this.MAP_GET_CLUSTER ? 17 : 0,\n        // подмена иконки кластера\n        iconCreateFunction: function iconCreateFunction(cluster) {\n          return new L.DivIcon({\n            html: '<div style=\"background-color:' + this.cluster_color + ';\"><span>' + cluster.getChildCount() + '</span></div>',\n            className: 'marker-cluster marker-cluster-small marker-cluster-bg-new',\n            iconSize: new L.Point(40, 40)\n          });\n        },\n        // цвет региона сгруппированного кластера\n        spiderLegPolylineOptions: {\n          weight: 1.5,\n          color: this.cluster_color,\n          opacity: 0.5\n        } // несгрупированные и сгруппированные маркеры одинаковы\n        // singleMarkerMode: true,\n\n      };\n    },\n    geojson_options: function geojson_options(map_ind) {\n      var self = this;\n      return {\n        // для каждого маркера / фигуры\n        onEachFeature: function (feature, layer) {\n          // control-легенда: установка onHover\n          // события повторно вызывают this.data_normalize_color\n          var self = this;\n          layer.on('mouseover', function (e) {\n            self.hover_map_ind = map_ind;\n            self.hover_feature_ind = feature.ind;\n          });\n          layer.on('mouseout', function (e) {\n            if (!e.originalEvent.ctrlKey) self.hover_map_ind = -1;\n            self.hover_feature_ind = -1;\n          }); // подсказка\n\n          if (self.MAP_GET_HINT && feature.properties.hint && feature.properties.hint != '') layer.bindTooltip(\"<div>\" + feature.properties.hint + \"</div>\", {\n            permanent: false,\n            sticky: true\n          }); // тип линии: бегущая пунктирная\n\n          var line = self.SCRIPT_GET_ITEM_LINE(map_ind);\n\n          if (['LineString'].indexOf(feature.geometry.type) > -1 && line != _components_Map_Leaflet_L_Const__WEBPACK_IMPORTED_MODULE_6__[\"MAP_ITEM\"].LINE.DEFAULT) {\n            // 'Polygon'\n            layer.setStyle({\n              'className': line\n            });\n          } // редактирование запрещено - удалить pm - для уменьшения объема вычислений\n\n\n          if (layer.pm) {\n            delete layer.pm;\n          } // тип полигона: color\n          // let polygon = self.SCRIPT_GET_ITEM_POLYGON(map_ind);\n          // if ((['Polygon', ].indexOf(feature.geometry.type)>-1) && (polygon!=POLYGON.DEFAULT)) {\n          // }\n\n        }.bind(this),\n        // стиль маркеров\n        pointToLayer: function pointToLayer(feature, latlng) {\n          return Object(_components_Map_Leaflet_L_Marker__WEBPACK_IMPORTED_MODULE_7__[\"marker_get\"])(latlng, {\n            name: self.SCRIPT_GET_ITEM_MARKER(map_ind),\n            color: self.SCRIPT_GET_ITEM_COLOR(map_ind),\n            icon: self.SCRIPT_GET_ITEM_ICON(map_ind) // size:  self.SCRIPT_GET_ITEM_ICON(map_ind), не реализовано за ненадобностью\n\n          });\n        },\n        // стиль фигур\n        style: function style(feature) {\n          return {\n            weight: 2,\n            opacity: .5,\n            fillOpacity: .3,\n            color: self.SCRIPT_GET_ITEM_COLOR(map_ind),\n            fillColor: feature.color // set in mixin\n\n          };\n        }\n      };\n    },\n    // ===============\n    // СОБЫТИЯ\n    // ===============\n    onMapReady: function onMapReady() {\n      this.map = this.$refs.map.mapObject; //this.onEditReady();\n    },\n    onClick: function onClick(event) {\n      console.log(event.latlng);\n    },\n    onTest2: function onTest2(event) {\n      // var fg = L.featureGroup();\n      // this.map.eachLayer((layer)=>{\n      //   if((layer instanceof L.Path || layer instanceof L.Marker) && layer.pm && layer.pm.edited){\n      //     fg.addLayer(layer);\n      //   }\n      // });\n      // console.log(fg.toGeoJSON());\n      // this.map.pm.getGeomanLayers().forEach(function(layer){\n      //   console.log(1, layer)\n      // });\n      // console.log(2, this.map.pm.getGeomanLayers(true))\n      // this.map.pm.enableDraw('Polygon', {});\n      this.editor_data_set();\n    },\n    // GET BUTTON\n    btn_get_click: function btn_get_click(event) {\n      console.log(this.getDataAsGeoJSON());\n    },\n    getDataAsGeoJSON: function getDataAsGeoJSON() {\n      // create FeatureCollection\n      var geoJSON = {\n        type: 'FeatureCollection',\n        features: []\n      }; // export each layer\n\n      this.map.eachLayer(function (layer) {\n        if (layer._leaflet_id && (layer instanceof L.Path || layer instanceof L.Marker)) {\n          var geoJSONShape = layer.toGeoJSON(16); // для точности\n\n          geoJSONShape.properties = layer.properties;\n          geoJSONShape.id = layer._leaflet_id;\n          geoJSON.features.push(geoJSONShape); // normalize coordinates (> 180/>90)\n          // TODO\n        }\n      });\n      return geoJSON;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL2NvbXBvbmVudHMvTWFwL0xlYWZsZXQvTGVhZmxldC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0xlYWZsZXQudnVlP2QwODIiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IHN0eWxlPVwiaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTtcIj5cbiAgICA8bC1tYXBcbiAgICAgIHJlZj1cIm1hcFwiXG4gICAgICA6b3B0aW9ucz1cIm1hcE9wdGlvbnNcIlxuICAgICAgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IHotaW5kZXg6IDA7XCJcbiAgICAgIEByZWFkeT1cIm9uTWFwUmVhZHlcIlxuICAgICAgQGNsaWNrPVwib25DbGlja1wiXG4gICAgICBAY29udGV4dG1lbnU9XCJtZW51X3Nob3dcIlxuICAgID5cblxuICAgICAgPCEtLSDQn9Ce0JTQm9Ce0JbQmtCQIC0tPlxuICAgICAgPGwtdGlsZS1sYXllclxuICAgICAgICA6dXJsPVwiTUFQX0dFVF9USUxFU1tNQVBfR0VUX1RJTEVdLnVybFwiXG4gICAgICAgIDphdHRyaWJ1dGlvbj1cIk1BUF9HRVRfVElMRVNbTUFQX0dFVF9USUxFXS5hdHRyXCJcbiAgICAgICAgOnRtcz1cIk1BUF9HRVRfVElMRVNbTUFQX0dFVF9USUxFXS50bXNcIlxuICAgICAgLz5cblxuXG4gICAgICA8IS0tINCk0JjQk9Cj0KDQqyDQmNCXIHN0YXRlLm1hcCAtLT5cbiAgICAgIDxsLWxheWVyLWdyb3VwXG4gICAgICAgIHYtZm9yPVwiKG1hcF9pdGVtLCBtYXBfaW5kKSBpbiBTQ1JJUFRfR0VUXCJcbiAgICAgICAgdi1iaW5kOmtleT1cIk1BUF9HRVRfS0VZKG1hcF9pbmQpXCJcbiAgICAgID5cbiAgICAgICAgPGwtbWFya2VyLWNsdXN0ZXJcbiAgICAgICAgICA6a2V5PVwiTUFQX0dFVF9LRVkobWFwX2luZClcIlxuICAgICAgICAgIDpvcHRpb25zPVwiY2x1c3Rlcl9vcHRpb25zKG1hcF9pbmQpXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxsLWdlby1qc29uXG4gICAgICAgICAgICA6Z2VvanNvbj1cImRhdGFfbm9ybWFsaXplKG1hcF9pbmQpXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwiZ2VvanNvbl9vcHRpb25zKG1hcF9pbmQpXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2wtbWFya2VyLWNsdXN0ZXI+XG4gICAgICA8L2wtbGF5ZXItZ3JvdXA+XG5cblxuICAgICAgPCEtLSDQoNCV0JTQkNCa0KLQntCgIC0tPlxuICAgICAgPEVkaXQvPlxuXG4gICAgICA8IS0tINCc0JDQodCo0KLQkNCRIC0tPlxuICAgICAgPGwtY29udHJvbC1zY2FsZVxuICAgICAgICB2LWlmPVwiTUFQX0dFVF9TQ0FMRVwiXG4gICAgICAgIHBvc2l0aW9uPVwiYm90dG9tcmlnaHRcIlxuICAgICAgICA6aW1wZXJpYWw9XCJmYWxzZVwiXG4gICAgICAgIDptZXRyaWM9XCJ0cnVlXCJcbiAgICAgIC8+XG5cbiAgICAgIDwhLS0g0JvQmNCd0JXQmdCa0JAgLS0+XG4gICAgICA8bC1jb250cm9sLXBvbHlsaW5lLW1lYXN1cmVcbiAgICAgICAgdi1pZj1cIk1BUF9HRVRfTUVBU1VSRVwiXG4gICAgICAgIDpvcHRpb25zPVwibWVhc3VyZV9vcHRpb25zKClcIlxuICAgICAgLz5cblxuICAgICAgPCEtLSDQktCg0JXQnNCV0J3QndCe0Jkg0KTQmNCb0KzQotCgIC0tPlxuICAgICAgPFJhbmdlIDpvcHRpb25zPVwicmFuZ2Vfb3B0aW9ucygpXCIvPlxuXG4gICAgICA8IS0tINCb0JXQk9CV0J3QlNCQIC0tPlxuICAgICAgPExlZ2VuZCA6b3B0aW9ucz1cImxlZ2VuZF9vcHRpb25zKClcIi8+XG5cbiAgICAgIDwhLS0g0JvQntCT0J7QotCY0J8gLS0+XG4gICAgICA8TG9nby8+XG5cbiAgICAgIDwhLS0g0KLQldCh0KIgLS0+XG4gICAgICA8IS0tXG4gICAgICA8bC1jb250cm9sXG4gICAgICAgIHYtaWY9XCJ0cnVlXCJcbiAgICAgICAgcG9zaXRpb249XCJ0b3BsZWZ0XCJcbiAgICAgID5cbiAgICAgICAgPHYtYnRuIGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lciBsZWFmbGV0LWJ1dHRvbnMtY29udHJvbC1idXR0b25cIiBAY2xpY2s9XCJlZGl0b3Jfb25cIj5UZXN0IDE8L3YtYnRuPlxuICAgICAgICA8di1idG4gY2xhc3M9XCJidXR0b24tY29udGFpbmVyIGxlYWZsZXQtYnV0dG9ucy1jb250cm9sLWJ1dHRvblwiIEBjbGljaz1cIm9uVGVzdDJcIj5UZXN0IDI8L3YtYnRuPlxuICAgICAgPC9sLWNvbnRyb2w+XG4gICAgICAtLT5cblxuICAgIDwvbC1tYXA+XG5cbiAgICA8TWVudVxuICAgICAgOm9wdGlvbnM9XCJtZW51X29wdGlvbnMoKVwiXG4gICAgICBAZXZlbnRfZ2V0PVwiYnRuX2dldF9jbGlja1wiXG4gICAgICBAbGVnZW5kX2hpZGU9XCJsZWdlbmRfaGlkZVwiXG4gICAgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG5cblxuPHNjcmlwdD5cblxuaW1wb3J0IHtcbiAgbWFwR2V0dGVycyxcbiAgLy9tYXBBY3Rpb25zLFxufSBmcm9tICd2dWV4JztcblxuaW1wb3J0IHtcbiAgLy9MLFxuICBJY29uLFxuICBsYXRMbmcsXG59IGZyb20gXCJsZWFmbGV0XCI7XG5cbmltcG9ydCB7XG4gIExNYXAsXG4gIExUaWxlTGF5ZXIsXG4gIExNYXJrZXIsXG4gIExQb3B1cCxcbiAgTFRvb2x0aXAsXG4gIExGZWF0dXJlR3JvdXAsXG4gIExMYXllckdyb3VwLFxuICBMR2VvSnNvbixcbiAgTFBvbHlsaW5lLFxuICBMUG9seWdvbixcbiAgTENvbnRyb2xTY2FsZSxcbiAgTENvbnRyb2wsXG4gIExJY29uLFxufSBmcm9tIFwidnVlMi1sZWFmbGV0XCI7XG5cbmltcG9ydCB7IE1BUF9JVEVNIH0gICAgICAgICAgICAgICAgIGZyb20gJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLkNvbnN0JztcbmltcG9ydCB7IG1hcmtlcl9nZXQgfSAgICAgICAgICAgICAgIGZyb20gJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLk1hcmtlcic7XG5cbmltcG9ydCBWdWUyTGVhZmxldE1hcmtlckNsdXN0ZXIgICAgIGZyb20gJ3Z1ZTItbGVhZmxldC1tYXJrZXJjbHVzdGVyJztcbmltcG9ydCBMQ29udHJvbFBvbHlsaW5lTWVhc3VyZSAgICAgIGZyb20gJ3Z1ZTItbGVhZmxldC1wb2x5bGluZS1tZWFzdXJlJztcblxuXG5pbXBvcnQgJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLk1hcmtlci5QdWxzZSc7XG5pbXBvcnQgJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9wcm9qNCdcbmltcG9ydCAnQC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0wuUHJvajRsZWFmbGV0J1xuXG5pbXBvcnQgeyBkYXRlc3FsX3RvX3RzLCB9IGZyb20gJ0AvcGx1Z2lucy9zeXMnO1xuXG5pbXBvcnQgRWRpdCAgICAgICAgICAgIGZyb20gJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9FZGl0JztcbmltcG9ydCBNZW51ICAgICAgICAgICAgZnJvbSAnQC9jb21wb25lbnRzL01hcC9MZWFmbGV0L01lbnUnO1xuaW1wb3J0IFJhbmdlICAgICAgICAgICBmcm9tICdAL2NvbXBvbmVudHMvTWFwL0xlYWZsZXQvUmFuZ2UnO1xuaW1wb3J0IExlZ2VuZCAgICAgICAgICBmcm9tICdAL2NvbXBvbmVudHMvTWFwL0xlYWZsZXQvTGVnZW5kJztcbmltcG9ydCBMb2dvICAgICAgICAgICAgZnJvbSAnQC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0xvZ28nO1xuaW1wb3J0IE1peEtleSAgICAgICAgICBmcm9tICdAL2NvbXBvbmVudHMvTWFwL0xlYWZsZXQvTC5NaXguS2V5JztcbmltcG9ydCBNaXhGZWF0dXJlQ29sb3IgZnJvbSAnQC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0wuTWl4LkZlYXR1cmVDb2xvcic7XG5pbXBvcnQgTWl4Q29udHJvbCAgICAgIGZyb20gJ0AvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLk1peC5Db250cm9sJztcblxuXG4vLyDRg9GB0YLRgNCw0L3QtdC90LjQtSDQsdCw0LPQsCDRgSDQv9GD0YLRj9C80LhcbmRlbGV0ZSBJY29uLkRlZmF1bHQucHJvdG90eXBlLl9nZXRJY29uVXJsO1xuSWNvbi5EZWZhdWx0Lm1lcmdlT3B0aW9ucyh7XG4gIGljb25SZXRpbmFVcmw6IHJlcXVpcmUoJ2xlYWZsZXQvZGlzdC9pbWFnZXMvbWFya2VyLWljb24tMngucG5nJyksXG4gIGljb25Vcmw6ICAgICAgIHJlcXVpcmUoJ2xlYWZsZXQvZGlzdC9pbWFnZXMvbWFya2VyLWljb24ucG5nJyksXG4gIHNoYWRvd1VybDogICAgIHJlcXVpcmUoJ2xlYWZsZXQvZGlzdC9pbWFnZXMvbWFya2VyLXNoYWRvdy5wbmcnKSxcbn0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJMZWFmbGV0XCIsXG5cblxuICBtaXhpbnM6IFtcbiAgICBNaXhLZXksXG4gICAgTWl4RmVhdHVyZUNvbG9yLFxuICAgIE1peENvbnRyb2wsXG4gIF0sXG5cblxuICBjb21wb25lbnRzOiB7XG4gICAgTE1hcCxcbiAgICBMVGlsZUxheWVyLFxuICAgIExNYXJrZXIsXG4gICAgTFBvcHVwLFxuICAgIExUb29sdGlwLFxuICAgIExGZWF0dXJlR3JvdXAsXG4gICAgTExheWVyR3JvdXAsXG4gICAgTEdlb0pzb24sXG4gICAgTFBvbHlsaW5lLFxuICAgIExQb2x5Z29uLFxuICAgIExDb250cm9sU2NhbGUsXG4gICAgTENvbnRyb2wsXG4gICAgTEljb24sXG4gICAgJ2wtbWFya2VyLWNsdXN0ZXInOiBWdWUyTGVhZmxldE1hcmtlckNsdXN0ZXIsXG4gICAgTENvbnRyb2xQb2x5bGluZU1lYXN1cmUsXG5cbiAgICBFZGl0LFxuICAgIE1lbnUsXG4gICAgUmFuZ2UsXG4gICAgTGVnZW5kLFxuICAgIExvZ28sXG4gIH0sXG5cblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtZW51OiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICB4OiAgICAgICAwLFxuICAgICAgICB5OiAgICAgICAwLFxuICAgICAgfSxcblxuICAgICAgaG92ZXJfbWFwX2luZDogICAgIC0xLCAgICAgIC8vIE1BUF9JVEVNW2hvdmVyX21hcF9pbmRdICAgICAgICAgICAgICAgICAgIC0g0LHQu9C+0LosINC90LDQtCDQutC+0YLQvtGA0YvQvCDQvdCw0YXQvtC00LjRgtGB0Y8g0LrRg9GA0YHQvtGAXG4gICAgICBob3Zlcl9mZWF0dXJlX2luZDogLTEsICAgICAgLy8gTUFQX0lURU1bXS5GQy5mZWF0dXJlc1tob3Zlcl9mZWF0dXJlX2luZF0gLSDRhNC40LPRg9GA0LAsINC90LDQtCDQutC+0YLQvtGA0L7QuSDQvdCw0YXQvtC00LjRgtGB0Y8g0LrRg9GA0YHQvtGAXG5cbiAgICAgIG1hcE9wdGlvbnM6IHtcbiAgICAgICAgem9vbUNvbnRyb2w6IGZhbHNlLFxuICAgICAgICB6b29tU25hcDogMC41LFxuICAgICAgfSxcbiAgICB9O1xuICB9LFxuXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICAuLi5tYXBHZXR0ZXJzKFtcbiAgICAgICdNQVBfR0VUX0tFWScsXG4gICAgICAnTUFQX0dFVF9SQU5HRV9TRUwnLFxuICAgICAgJ01BUF9HRVRfVElMRVMnLFxuICAgICAgJ01BUF9HRVRfVElMRScsXG4gICAgICAnTUFQX0dFVF9TQ0FMRScsXG4gICAgICAnTUFQX0dFVF9NRUFTVVJFJyxcbiAgICAgICdNQVBfR0VUX0NMVVNURVInLFxuICAgICAgJ01BUF9HRVRfSElOVCcsXG5cbiAgICAgICdTQ1JJUFRfR0VUJyxcbiAgICAgICdTQ1JJUFRfR0VUX0lURU1fQ09MT1InLFxuICAgICAgJ1NDUklQVF9HRVRfSVRFTV9NQVJLRVInLFxuICAgICAgJ1NDUklQVF9HRVRfSVRFTV9MSU5FJyxcbiAgICAgICdTQ1JJUFRfR0VUX0lURU1fUE9MWUdPTicsXG4gICAgICAnU0NSSVBUX0dFVF9JVEVNX0lDT04nLFxuICAgIF0pLFxuICAgIC8vZm9ybTogdm0gPT4gdm0sXG4gIH0sXG5cblxuICBtZXRob2RzOiB7XG4gICAgLy8gLi4ubWFwQWN0aW9ucyhbXG4gICAgLy8gICAnTUFQX0FDVF9SQU5HRV9UUycsXG4gICAgLy8gXSksXG5cbiAgICAvLyA9PT09PT09PT09PT09PT1cbiAgICAvLyBNRU5VXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgbWVudV9zaG93KGUpIHtcbiAgICAgIGUub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5vcmlnaW5hbEV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5tZW51LnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMubWVudS54ID0gZS5vcmlnaW5hbEV2ZW50LmNsaWVudFg7XG4gICAgICB0aGlzLm1lbnUueSA9IGUub3JpZ2luYWxFdmVudC5jbGllbnRZO1xuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4geyB0aGlzLm1lbnUudmlzaWJsZSA9IHRydWUgfSlcbiAgICB9LFxuXG4gICAgbWVudV9vcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmlzaWJsZSA6IHRoaXMubWVudS52aXNpYmxlLFxuICAgICAgICB4ICAgICAgIDogdGhpcy5tZW51LngsXG4gICAgICAgIHkgICAgICAgOiB0aGlzLm1lbnUueSxcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyA9PT09PT09PT09PT09PT1cbiAgICAvLyBNRUFTVVJFXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgbWVhc3VyZV9vcHRpb25zKCkge1xuICAgICAgbGV0IENPTE9SID0gJyM0OTQnOyAgIC8vINGG0LLQtdGCINC80LDRgNC60LXRgNC+0LIg0Lgg0LvQuNC90LjQuVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwb3NpdGlvbjogICAgICAgICAgICAgICAgJ3RvcGxlZnQnLFxuICAgICAgICAgIHVuaXQ6ICAgICAgICAgICAgICAgICAgICAnbWV0cmVzJyxcbiAgICAgICAgICBtZWFzdXJlQ29udHJvbENsYXNzZXM6ICAgWydzZWxlY3Rfb2ZmJ10sXG4gICAgICAgICAgY2xlYXJNZWFzdXJlbWVudHNPblN0b3A6IHRydWUsXG4gICAgICAgICAgbWVhc3VyZUNvbnRyb2xUaXRsZU9uOiAgICfQoNGD0LvQtdGC0LrQsDog0LLQutC70Y7Rh9C40YLRjCcsXG4gICAgICAgICAgbWVhc3VyZUNvbnRyb2xUaXRsZU9mZjogICfQoNGD0LvQtdGC0LrQsDog0LLRi9C60LvRjtGH0LjRgtGMJyxcbiAgICAgICAgICB0b29sdGlwVGV4dERlbGV0ZTogICAgICAgJ9Cd0LDQttC80LjRgtC1ICBTSElGVCDQuCDQutC70LjQutC90LjRgtC1INC80YvRiNC60L7QuSDQtNC70Y8gPGI+0YPQtNCw0LvQtdC90LjRjyDRgtC+0YfQutC4PC9iPicsXG4gICAgICAgICAgdG9vbHRpcFRleHRSZXN1bWU6ICAgICAgICc8YnI+0J3QsNC20LzQuNGC0LUgQ1RSTCDQuCDQutC70LjQutC90LjRgtC1INC80YvRiNC60L7QuSDQtNC70Y8gPGI+0L/RgNC+0LTQvtC70LbQtdC90LjRjyDQu9C40L3QuNC4PC9iPicsXG4gICAgICAgICAgdG9vbHRpcFRleHRBZGQ6ICAgICAgICAgICfQndCw0LbQvNC40YLQtSBDVFJMINC4INC60LvQuNC60L3QuNGC0LUg0LzRi9GI0LrQvtC5INC00LvRjyA8Yj7QtNC+0LHQsNCy0LvQtdC90LjRjyDRgtC+0YfQutC4PC9iPicsXG4gICAgICAgICAgdG9vbHRpcFRleHRGaW5pc2g6ICAgICAgICcnLFxuICAgICAgICAgIHRvb2x0aXBUZXh0TW92ZTogICAgICAgICAnJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICAgICAgICAgJyNkZmQnLFxuICAgICAgICAgIHRlbXBMaW5lOiAgICAgICAgICAgICAgICB7IGNvbG9yOiBDT0xPUiwgd2VpZ2h0OiAyLCB9LFxuICAgICAgICAgIGZpeGVkTGluZTogICAgICAgICAgICAgICB7IGNvbG9yOiBDT0xPUiwgd2VpZ2h0OiAyLCB9LFxuICAgICAgICAgIHN0YXJ0Q2lyY2xlOiAgICAgICAgICAgICB7IGNvbG9yOiBDT0xPUiwgd2VpZ2h0OiAxLCBmaWxsQ29sb3I6ICcjMGYwJywgZmlsbE9wYWNpdHk6IDEsIHJhZGl1czogNSwgfSxcbiAgICAgICAgICBpbnRlcm1lZENpcmNsZTogICAgICAgICAgeyBjb2xvcjogQ09MT1IsIHdlaWdodDogMSwgZmlsbENvbG9yOiAnI2ZmMCcsIGZpbGxPcGFjaXR5OiAxLCByYWRpdXM6IDUsIH0sXG4gICAgICAgICAgY3VycmVudENpcmNsZTogICAgICAgICAgIHsgY29sb3I6IENPTE9SLCB3ZWlnaHQ6IDEsIGZpbGxDb2xvcjogJyNmMGYnLCBmaWxsT3BhY2l0eTogMSwgcmFkaXVzOiA1LCB9LFxuICAgICAgICAgIGVuZENpcmNsZTogICAgICAgICAgICAgICB7IGNvbG9yOiBDT0xPUiwgd2VpZ2h0OiAxLCBmaWxsQ29sb3I6ICcjZjAwJywgZmlsbE9wYWNpdHk6IDEsIHJhZGl1czogNSwgfSxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgLy8gUkFOR0VcbiAgICAvLyA9PT09PT09PT09PT09PT1cbiAgICByYW5nZV9vcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHsgfVxuICAgIH0sXG5cblxuICAgIC8vID09PT09PT09PT09PT09PVxuICAgIC8vIExFR0VORFxuICAgIC8vID09PT09PT09PT09PT09PVxuICAgIGxlZ2VuZF9vcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG92ZXJfbWFwX2luZCAgICAgOiB0aGlzLmhvdmVyX21hcF9pbmQsXG4gICAgICAgIGhvdmVyX2ZlYXR1cmVfaW5kIDogdGhpcy5ob3Zlcl9mZWF0dXJlX2luZCxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGVnZW5kX2hpZGUoKSB7XG4gICAgICB0aGlzLmhvdmVyX21hcF9pbmQgICAgID0gLTE7XG4gICAgICB0aGlzLmhvdmVyX2ZlYXR1cmVfaW5kID0gLTE7XG4gICAgfSxcblxuXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgLy8gTUFQXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgLy8g0LrQvtGA0YDQtdC60YLQuNGA0L7QstCw0YLRjCDQtNCw0L3QvdGL0LVcbiAgICBkYXRhX25vcm1hbGl6ZShtYXBfaW5kKSB7XG4gICAgICAvLyDRgNCw0YHRgdGH0LjRgtCw0YLRjCDRhtCy0LXRgtCwICjQu9C10LPQtdC90LTQsCwg0YbQstC10YIg0L7RgiDQt9C90LDRh9C10L3QuNGPINCyINCz0YDRg9C/0L/QtSlcbiAgICAgIHRoaXMuZGF0YV9ub3JtYWxpemVfY29sb3IobWFwX2luZCk7XG5cbiAgICAgIC8vIGRlZXAgY29weVxuICAgICAgbGV0IGl0ZW0gPSB0aGlzLlNDUklQVF9HRVRfSVRFTShtYXBfaW5kKTtcbiAgICAgIGxldCBmYyAgID0gaXRlbVtNQVBfSVRFTS5GQ107XG4gICAgICBmYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZmMpKTtcblxuICAgICAgLy8g0YPRgdGC0LDQvdC+0LLQuNGC0YwgZmMuZmVhdHVyZXNbaW5kXS5pbmQgLSDQv9C+0YDRj9C00LrQvtCy0YvQuSDQvdC+0LzQtdGAINGE0LjQs9GD0YDRiyDQsiBmY1xuICAgICAgZm9yKGxldCBpbmQ9MDsgaW5kPGZjLmZlYXR1cmVzLmxlbmd0aDsgaW5kKyspIHsgZmMuZmVhdHVyZXNbaW5kXS5pbmQgPSBpbmQ7IH1cblxuICAgICAgLy8g0L7RgtGE0LjQu9GM0YLRgNC+0LLQsNGC0Ywg0YEg0LTQvtC/0YPRgdGC0LjQvNGL0LzQuCDQtNCw0YLQsNC80LhcbiAgICAgIGxldCByYW5nZV90cyAgPSB0aGlzLk1BUF9HRVRfUkFOR0VfU0VMO1xuICAgICAgaWYgKChyYW5nZV90c1swXT4wKSAmJiAocmFuZ2VfdHNbMV0+MCkpIHtcbiAgICAgICAgbGV0IGl0ZW1fZGF0ZTtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gZmMuZmVhdHVyZXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoIWl0ZW0ucHJvcGVydGllcy5kYXRlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICBpdGVtX2RhdGUgPSBkYXRlc3FsX3RvX3RzKGl0ZW0ucHJvcGVydGllcy5kYXRlKTtcbiAgICAgICAgICByZXR1cm4gKChpdGVtX2RhdGUgPj0gcmFuZ2VfdHNbMF0pICYmIChpdGVtX2RhdGUgPD0gcmFuZ2VfdHNbMV0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZjLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYztcbiAgICB9LFxuXG4gICAgY2x1c3Rlcl9vcHRpb25zKG1hcF9pbmQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vINC+0LHQu9Cw0YHRgtGMINC/0YDQuCDQvdCw0LLQtdC00LXQvdC40Lgg0LrRg9GA0YHQvtGA0LAg0L3QsCDQutC70LDRgdGC0LXRgFxuICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICBwb2x5Z29uT3B0aW9uczogeyBjb2xvcjogdGhpcy5TQ1JJUFRfR0VUX0lURU1fQ09MT1IobWFwX2luZCksIH0sXG5cbiAgICAgICAgLy8g0LTQu9GPINC/0L7RgdC70LXQtNGD0Y7RidC10Lkg0LrQvtGA0YDQtdC60YbQuNC4INGG0LLQtdGC0LAg0LzQsNGA0LrQtdGA0L7QslxuICAgICAgICBjbHVzdGVyX2NvbG9yOiB0aGlzLlNDUklQVF9HRVRfSVRFTV9DT0xPUihtYXBfaW5kKSxcblxuICAgICAgICAvLyDRg9Cy0LXQu9C40YfQtdC90LjQtSwg0L/RgNC4INC60L7RgtC+0YDQvtC8INGB0L7Qt9C00LDQstCw0YLRjCDQutC70LDRgdGC0LXRgNGLXG4gICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiB0aGlzLk1BUF9HRVRfQ0xVU1RFUj8xNzowLFxuXG4gICAgICAgIC8vINC/0L7QtNC80LXQvdCwINC40LrQvtC90LrQuCDQutC70LDRgdGC0LXRgNCwXG4gICAgICAgIGljb25DcmVhdGVGdW5jdGlvbjogZnVuY3Rpb24gKGNsdXN0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEwuRGl2SWNvbih7XG4gICAgICAgICAgICBodG1sOiAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6Jyt0aGlzLmNsdXN0ZXJfY29sb3IrJztcIj48c3Bhbj4nICsgY2x1c3Rlci5nZXRDaGlsZENvdW50KCkgKyAnPC9zcGFuPjwvZGl2PicsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtYXJrZXItY2x1c3RlciBtYXJrZXItY2x1c3Rlci1zbWFsbCBtYXJrZXItY2x1c3Rlci1iZy1uZXcnLFxuICAgICAgICAgICAgaWNvblNpemU6IG5ldyBMLlBvaW50KDQwLCA0MCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g0YbQstC10YIg0YDQtdCz0LjQvtC90LAg0YHQs9GA0YPQv9C/0LjRgNC+0LLQsNC90L3QvtCz0L4g0LrQu9Cw0YHRgtC10YDQsFxuICAgICAgICBzcGlkZXJMZWdQb2x5bGluZU9wdGlvbnM6IHsgd2VpZ2h0OiAxLjUsIGNvbG9yOiB0aGlzLmNsdXN0ZXJfY29sb3IsIG9wYWNpdHk6IDAuNSB9LFxuXG4gICAgICAgIC8vINC90LXRgdCz0YDRg9C/0LjRgNC+0LLQsNC90L3Ri9C1INC4INGB0LPRgNGD0L/Qv9C40YDQvtCy0LDQvdC90YvQtSDQvNCw0YDQutC10YDRiyDQvtC00LjQvdCw0LrQvtCy0YtcbiAgICAgICAgLy8gc2luZ2xlTWFya2VyTW9kZTogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSxcblxuXG4gICAgZ2VvanNvbl9vcHRpb25zKG1hcF9pbmQpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vINC00LvRjyDQutCw0LbQtNC+0LPQviDQvNCw0YDQutC10YDQsCAvINGE0LjQs9GD0YDRi1xuICAgICAgICBvbkVhY2hGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgIC8vIGNvbnRyb2wt0LvQtdCz0LXQvdC00LA6INGD0YHRgtCw0L3QvtCy0LrQsCBvbkhvdmVyXG4gICAgICAgICAgLy8g0YHQvtCx0YvRgtC40Y8g0L/QvtCy0YLQvtGA0L3QviDQstGL0LfRi9Cy0LDRjtGCIHRoaXMuZGF0YV9ub3JtYWxpemVfY29sb3JcbiAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgbGF5ZXIub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGUpIHsgc2VsZi5ob3Zlcl9tYXBfaW5kID0gbWFwX2luZDsgIHNlbGYuaG92ZXJfZmVhdHVyZV9pbmQgPSBmZWF0dXJlLmluZDsgfSk7XG4gICAgICAgICAgbGF5ZXIub24oJ21vdXNlb3V0JywgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICghZS5vcmlnaW5hbEV2ZW50LmN0cmxLZXkpIHNlbGYuaG92ZXJfbWFwX2luZCA9IC0xO1xuICAgICAgICAgICAgc2VsZi5ob3Zlcl9mZWF0dXJlX2luZCA9IC0xO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8g0L/QvtC00YHQutCw0LfQutCwXG4gICAgICAgICAgaWYgKHNlbGYuTUFQX0dFVF9ISU5UICYmIGZlYXR1cmUucHJvcGVydGllcy5oaW50ICYmIGZlYXR1cmUucHJvcGVydGllcy5oaW50IT0nJykgbGF5ZXIuYmluZFRvb2x0aXAoXG4gICAgICAgICAgICBcIjxkaXY+XCIrZmVhdHVyZS5wcm9wZXJ0aWVzLmhpbnQrXCI8L2Rpdj5cIixcbiAgICAgICAgICAgIHsgcGVybWFuZW50OiBmYWxzZSwgc3RpY2t5OiB0cnVlLCB9XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vINGC0LjQvyDQu9C40L3QuNC4OiDQsdC10LPRg9GJ0LDRjyDQv9GD0L3QutGC0LjRgNC90LDRj1xuICAgICAgICAgIGxldCBsaW5lID0gc2VsZi5TQ1JJUFRfR0VUX0lURU1fTElORShtYXBfaW5kKTtcbiAgICAgICAgICBpZiAoKFsnTGluZVN0cmluZycsIF0uaW5kZXhPZihmZWF0dXJlLmdlb21ldHJ5LnR5cGUpPi0xKSAmJiAobGluZSE9TUFQX0lURU0uTElORS5ERUZBVUxUKSkgeyAgIC8vICdQb2x5Z29uJ1xuICAgICAgICAgICAgbGF5ZXIuc2V0U3R5bGUoeydjbGFzc05hbWUnOiBsaW5lLCB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC30LDQv9GA0LXRidC10L3QviAtINGD0LTQsNC70LjRgtGMIHBtIC0g0LTQu9GPINGD0LzQtdC90YzRiNC10L3QuNGPINC+0LHRitC10LzQsCDQstGL0YfQuNGB0LvQtdC90LjQuVxuICAgICAgICAgIGlmIChsYXllci5wbSkgeyBkZWxldGUgbGF5ZXIucG07IH1cblxuICAgICAgICAgIC8vINGC0LjQvyDQv9C+0LvQuNCz0L7QvdCwOiBjb2xvclxuICAgICAgICAgIC8vIGxldCBwb2x5Z29uID0gc2VsZi5TQ1JJUFRfR0VUX0lURU1fUE9MWUdPTihtYXBfaW5kKTtcbiAgICAgICAgICAvLyBpZiAoKFsnUG9seWdvbicsIF0uaW5kZXhPZihmZWF0dXJlLmdlb21ldHJ5LnR5cGUpPi0xKSAmJiAocG9seWdvbiE9UE9MWUdPTi5ERUZBVUxUKSkge1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuXG5cbiAgICAgICAgLy8g0YHRgtC40LvRjCDQvNCw0YDQutC10YDQvtCyXG4gICAgICAgIHBvaW50VG9MYXllcjogZnVuY3Rpb24oZmVhdHVyZSwgbGF0bG5nKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcmtlcl9nZXQobGF0bG5nLCB7XG4gICAgICAgICAgICBuYW1lOiAgc2VsZi5TQ1JJUFRfR0VUX0lURU1fTUFSS0VSKG1hcF9pbmQpLFxuICAgICAgICAgICAgY29sb3I6IHNlbGYuU0NSSVBUX0dFVF9JVEVNX0NPTE9SIChtYXBfaW5kKSxcbiAgICAgICAgICAgIGljb246ICBzZWxmLlNDUklQVF9HRVRfSVRFTV9JQ09OICAobWFwX2luZCksXG4gICAgICAgICAgICAvLyBzaXplOiAgc2VsZi5TQ1JJUFRfR0VUX0lURU1fSUNPTihtYXBfaW5kKSwg0L3QtSDRgNC10LDQu9C40LfQvtCy0LDQvdC+INC30LAg0L3QtdC90LDQtNC+0LHQvdC+0YHRgtGM0Y5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8vINGB0YLQuNC70Ywg0YTQuNCz0YPRgFxuICAgICAgICBzdHlsZTogZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICAgICAgMixcbiAgICAgICAgICAgIG9wYWNpdHk6ICAgICAuNSxcbiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAuMyxcbiAgICAgICAgICAgIGNvbG9yOiAgICAgICBzZWxmLlNDUklQVF9HRVRfSVRFTV9DT0xPUihtYXBfaW5kKSxcbiAgICAgICAgICAgIGZpbGxDb2xvcjogICBmZWF0dXJlLmNvbG9yLCAvLyBzZXQgaW4gbWl4aW5cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuXG5cblxuICAgIC8vID09PT09PT09PT09PT09PVxuICAgIC8vINCh0J7QkdCr0KLQmNCvXG4gICAgLy8gPT09PT09PT09PT09PT09XG4gICAgb25NYXBSZWFkeSgpIHtcbiAgICAgIHRoaXMubWFwID0gdGhpcy4kcmVmcy5tYXAubWFwT2JqZWN0O1xuICAgICAgLy90aGlzLm9uRWRpdFJlYWR5KCk7XG4gICAgfSxcblxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmxhdGxuZyk7XG4gICAgfSxcblxuICAgIG9uVGVzdDIoZXZlbnQpIHtcbiAgICAgIC8vIHZhciBmZyA9IEwuZmVhdHVyZUdyb3VwKCk7XG4gICAgICAvLyB0aGlzLm1hcC5lYWNoTGF5ZXIoKGxheWVyKT0+e1xuICAgICAgLy8gICBpZigobGF5ZXIgaW5zdGFuY2VvZiBMLlBhdGggfHwgbGF5ZXIgaW5zdGFuY2VvZiBMLk1hcmtlcikgJiYgbGF5ZXIucG0gJiYgbGF5ZXIucG0uZWRpdGVkKXtcbiAgICAgIC8vICAgICBmZy5hZGRMYXllcihsYXllcik7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0pO1xuICAgICAgLy8gY29uc29sZS5sb2coZmcudG9HZW9KU09OKCkpO1xuXG4gICAgICAvLyB0aGlzLm1hcC5wbS5nZXRHZW9tYW5MYXllcnMoKS5mb3JFYWNoKGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgIC8vICAgY29uc29sZS5sb2coMSwgbGF5ZXIpXG4gICAgICAvLyB9KTtcblxuICAgICAgLy8gY29uc29sZS5sb2coMiwgdGhpcy5tYXAucG0uZ2V0R2VvbWFuTGF5ZXJzKHRydWUpKVxuICAgICAgLy8gdGhpcy5tYXAucG0uZW5hYmxlRHJhdygnUG9seWdvbicsIHt9KTtcblxuICAgICAgdGhpcy5lZGl0b3JfZGF0YV9zZXQoKTtcbiAgICB9LFxuXG5cblxuXG5cbiAgICAvLyBHRVQgQlVUVE9OXG4gICAgYnRuX2dldF9jbGljayhldmVudCkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5nZXREYXRhQXNHZW9KU09OKCkpO1xuICAgIH0sXG5cbiAgICBnZXREYXRhQXNHZW9KU09OICgpIHtcbiAgICAgIC8vIGNyZWF0ZSBGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgY29uc3QgZ2VvSlNPTiA9IHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IFtdXG4gICAgICB9O1xuXG4gICAgICAvLyBleHBvcnQgZWFjaCBsYXllclxuICAgICAgdGhpcy5tYXAuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICBpZiAobGF5ZXIuX2xlYWZsZXRfaWQgJiYgKGxheWVyIGluc3RhbmNlb2YgTC5QYXRoIHx8IGxheWVyIGluc3RhbmNlb2YgTC5NYXJrZXIpKSB7XG4gICAgICAgICAgY29uc3QgZ2VvSlNPTlNoYXBlICAgICAgPSBsYXllci50b0dlb0pTT04oMTYpOyAvLyDQtNC70Y8g0YLQvtGH0L3QvtGB0YLQuFxuICAgICAgICAgIGdlb0pTT05TaGFwZS5wcm9wZXJ0aWVzID0gbGF5ZXIucHJvcGVydGllcztcbiAgICAgICAgICBnZW9KU09OU2hhcGUuaWQgICAgICAgICA9IGxheWVyLl9sZWFmbGV0X2lkO1xuICAgICAgICAgIGdlb0pTT04uZmVhdHVyZXMucHVzaChnZW9KU09OU2hhcGUpO1xuXG4gICAgICAgICAgLy8gbm9ybWFsaXplIGNvb3JkaW5hdGVzICg+IDE4MC8+OTApXG4gICAgICAgICAgLy8gVE9ET1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdlb0pTT047XG4gICAgfSxcblxuXG4gIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAubGVhZmxldC1jZW50ZXIge1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwJSk7XG4gIH1cbiAgLnBvbHlsaW5lLW1lYXN1cmUtdG9vbHRpcC1kaWZmZXJlbmNlIHtcbiAgICBjb2xvcjogIzA2MDtcbiAgICBmb250LXN0eWxlOiBub3JtYWwhaW1wb3J0YW50O1xuICB9XG5cbiAgLyoqKiDQutC90L7Qv9C60LAgKioqL1xuICAucG9seWxpbmUtbWVhc3VyZS11bmljb2RlLWljb24ge1xuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpIWltcG9ydGFudDtcbiAgfVxuICAucG9seWxpbmUtbWVhc3VyZS1jb250cm9sT25CZ0NvbG9yIHtcbiAgICBjb2xvcjogcmVkIWltcG9ydGFudDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZSBzY29wZWQgbGFuZz1cInNjc3NcIj5cbiAgQGltcG9ydCBcIn5sZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3NcIjtcbiAgQGltcG9ydCBcIn5sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLmNzc1wiO1xuICBAaW1wb3J0IFwifmxlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuRGVmYXVsdC5jc3NcIjtcblxuICBAaW1wb3J0IFwifkAvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLmNzc1wiO1xuXG4gIEBpbXBvcnQgXCJ+QC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0wuTWFya2VyLkNsdXN0ZXIuY3NzXCI7XG4gIEBpbXBvcnQgXCJ+QC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0wuTWFya2VyLlB1bHNlLmNzc1wiO1xuICBAaW1wb3J0IFwifkAvY29tcG9uZW50cy9NYXAvTGVhZmxldC9MLk1hcmtlci5Gb250LmNzc1wiO1xuXG4gIEBpbXBvcnQgXCJ+QC9jb21wb25lbnRzL01hcC9MZWFmbGV0L0wuTWl4LkNvbnRyb2wuY3NzXCI7XG48L3N0eWxlPlxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUZBO0FBT0E7QUFJQTtBQWdCQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBT0E7QUFDQTtBQUdBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQVZBO0FBZUE7QUFHQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFsQkE7QUFvQkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBekJBO0FBMEJBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQU9BO0FBdERBO0FBd0RBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQXJRQTtBQTdFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Map/Leaflet/Leaflet.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./src/components/Map/Leaflet/proj4.js":
/*!*********************************************!*\
  !*** ./src/components/Map/Leaflet/proj4.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var _typeof = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\").default;\n\n__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.reduce.js */ \"./node_modules/core-js/modules/es.array.reduce.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n\n!function (e) {\n  if (\"object\" == ( false ? undefined : _typeof(exports))) module.exports = e();else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var f; }\n}(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return require(o, !0);\n          if (i) return i(o, !0);\n          throw new Error(\"Cannot find module '\" + o + \"'\");\n        }\n\n        var f = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(f.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, f, f.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) {\n      s(r[o]);\n    }\n\n    return s;\n  }({\n    1: [function (_dereq_, module, exports) {\n      var mgrs = _dereq_('mgrs');\n\n      function Point(x, y, z) {\n        if (!(this instanceof Point)) {\n          return new Point(x, y, z);\n        }\n\n        if (Array.isArray(x)) {\n          this.x = x[0];\n          this.y = x[1];\n          this.z = x[2] || 0.0;\n        } else if (_typeof(x) === 'object') {\n          this.x = x.x;\n          this.y = x.y;\n          this.z = x.z || 0.0;\n        } else if (typeof x === 'string' && typeof y === 'undefined') {\n          var coords = x.split(',');\n          this.x = parseFloat(coords[0], 10);\n          this.y = parseFloat(coords[1], 10);\n          this.z = parseFloat(coords[2], 10) || 0.0;\n        } else {\n          this.x = x;\n          this.y = y;\n          this.z = z || 0.0;\n        }\n\n        console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n      }\n\n      Point.fromMGRS = function (mgrsStr) {\n        return new Point(mgrs.toPoint(mgrsStr));\n      };\n\n      Point.prototype.toMGRS = function (accuracy) {\n        return mgrs.forward([this.x, this.y], accuracy);\n      };\n\n      module.exports = Point;\n    }, {\n      \"mgrs\": 67\n    }],\n    2: [function (_dereq_, module, exports) {\n      var parseCode = _dereq_(\"./parseCode\");\n\n      var extend = _dereq_('./extend');\n\n      var projections = _dereq_('./projections');\n\n      var deriveConstants = _dereq_('./deriveConstants');\n\n      function Projection(srsCode, callback) {\n        if (!(this instanceof Projection)) {\n          return new Projection(srsCode);\n        }\n\n        callback = callback || function (error) {\n          if (error) {\n            throw error;\n          }\n        };\n\n        var json = parseCode(srsCode);\n\n        if (_typeof(json) !== 'object') {\n          callback(srsCode);\n          return;\n        }\n\n        var modifiedJSON = deriveConstants(json);\n        var ourProj = Projection.projections.get(modifiedJSON.projName);\n\n        if (ourProj) {\n          extend(this, modifiedJSON);\n          extend(this, ourProj);\n          this.init();\n          callback(null, this);\n        } else {\n          callback(srsCode);\n        }\n      }\n\n      Projection.projections = projections;\n      Projection.projections.start();\n      module.exports = Projection;\n    }, {\n      \"./deriveConstants\": 33,\n      \"./extend\": 34,\n      \"./parseCode\": 37,\n      \"./projections\": 39\n    }],\n    3: [function (_dereq_, module, exports) {\n      module.exports = function (crs, denorm, point) {\n        var xin = point.x,\n            yin = point.y,\n            zin = point.z || 0.0;\n        var v, t, i;\n\n        for (i = 0; i < 3; i++) {\n          if (denorm && i === 2 && point.z === undefined) {\n            continue;\n          }\n\n          if (i === 0) {\n            v = xin;\n            t = 'x';\n          } else if (i === 1) {\n            v = yin;\n            t = 'y';\n          } else {\n            v = zin;\n            t = 'z';\n          }\n\n          switch (crs.axis[i]) {\n            case 'e':\n              point[t] = v;\n              break;\n\n            case 'w':\n              point[t] = -v;\n              break;\n\n            case 'n':\n              point[t] = v;\n              break;\n\n            case 's':\n              point[t] = -v;\n              break;\n\n            case 'u':\n              if (point[t] !== undefined) {\n                point.z = v;\n              }\n\n              break;\n\n            case 'd':\n              if (point[t] !== undefined) {\n                point.z = -v;\n              }\n\n              break;\n\n            default:\n              //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n              return null;\n          }\n        }\n\n        return point;\n      };\n    }, {}],\n    4: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n\n      var sign = _dereq_('./sign');\n\n      module.exports = function (x) {\n        return Math.abs(x) < HALF_PI ? x : x - sign(x) * Math.PI;\n      };\n    }, {\n      \"./sign\": 21\n    }],\n    5: [function (_dereq_, module, exports) {\n      var TWO_PI = Math.PI * 2; // SPI is slightly greater than Math.PI, so values that exceed the -180..180\n      // degree range by a tiny amount don't get wrapped. This prevents points that\n      // have drifted from their original location along the 180th meridian (due to\n      // floating point error) from changing their sign.\n\n      var SPI = 3.14159265359;\n\n      var sign = _dereq_('./sign');\n\n      module.exports = function (x) {\n        return Math.abs(x) <= SPI ? x : x - sign(x) * TWO_PI;\n      };\n    }, {\n      \"./sign\": 21\n    }],\n    6: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        if (Math.abs(x) > 1) {\n          x = x > 1 ? 1 : -1;\n        }\n\n        return Math.asin(x);\n      };\n    }, {}],\n    7: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));\n      };\n    }, {}],\n    8: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));\n      };\n    }, {}],\n    9: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        return 0.05859375 * x * x * (1 + 0.75 * x);\n      };\n    }, {}],\n    10: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        return x * x * x * (35 / 3072);\n      };\n    }, {}],\n    11: [function (_dereq_, module, exports) {\n      module.exports = function (a, e, sinphi) {\n        var temp = e * sinphi;\n        return a / Math.sqrt(1 - temp * temp);\n      };\n    }, {}],\n    12: [function (_dereq_, module, exports) {\n      module.exports = function (ml, e0, e1, e2, e3) {\n        var phi;\n        var dphi;\n        phi = ml / e0;\n\n        for (var i = 0; i < 15; i++) {\n          dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n          phi += dphi;\n\n          if (Math.abs(dphi) <= 0.0000000001) {\n            return phi;\n          }\n        } //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n\n\n        return NaN;\n      };\n    }, {}],\n    13: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n\n      module.exports = function (eccent, q) {\n        var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n\n        if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n          if (q < 0) {\n            return -1 * HALF_PI;\n          } else {\n            return HALF_PI;\n          }\n        } //var phi = 0.5* q/(1-eccent*eccent);\n\n\n        var phi = Math.asin(0.5 * q);\n        var dphi;\n        var sin_phi;\n        var cos_phi;\n        var con;\n\n        for (var i = 0; i < 30; i++) {\n          sin_phi = Math.sin(phi);\n          cos_phi = Math.cos(phi);\n          con = eccent * sin_phi;\n          dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n          phi += dphi;\n\n          if (Math.abs(dphi) <= 0.0000000001) {\n            return phi;\n          }\n        } //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n\n\n        return NaN;\n      };\n    }, {}],\n    14: [function (_dereq_, module, exports) {\n      module.exports = function (e0, e1, e2, e3, phi) {\n        return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);\n      };\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      module.exports = function (eccent, sinphi, cosphi) {\n        var con = eccent * sinphi;\n        return cosphi / Math.sqrt(1 - con * con);\n      };\n    }, {}],\n    16: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n\n      module.exports = function (eccent, ts) {\n        var eccnth = 0.5 * eccent;\n        var con, dphi;\n        var phi = HALF_PI - 2 * Math.atan(ts);\n\n        for (var i = 0; i <= 15; i++) {\n          con = eccent * Math.sin(phi);\n          dphi = HALF_PI - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;\n          phi += dphi;\n\n          if (Math.abs(dphi) <= 0.0000000001) {\n            return phi;\n          }\n        } //console.log(\"phi2z has NoConvergence\");\n\n\n        return -9999;\n      };\n    }, {}],\n    17: [function (_dereq_, module, exports) {\n      var C00 = 1;\n      var C02 = 0.25;\n      var C04 = 0.046875;\n      var C06 = 0.01953125;\n      var C08 = 0.01068115234375;\n      var C22 = 0.75;\n      var C44 = 0.46875;\n      var C46 = 0.01302083333333333333;\n      var C48 = 0.00712076822916666666;\n      var C66 = 0.36458333333333333333;\n      var C68 = 0.00569661458333333333;\n      var C88 = 0.3076171875;\n\n      module.exports = function (es) {\n        var en = [];\n        en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n        en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n        var t = es * es;\n        en[2] = t * (C44 - es * (C46 + es * C48));\n        t *= es;\n        en[3] = t * (C66 - es * C68);\n        en[4] = t * es * C88;\n        return en;\n      };\n    }, {}],\n    18: [function (_dereq_, module, exports) {\n      var pj_mlfn = _dereq_(\"./pj_mlfn\");\n\n      var EPSLN = 1.0e-10;\n      var MAX_ITER = 20;\n\n      module.exports = function (arg, es, en) {\n        var k = 1 / (1 - es);\n        var phi = arg;\n\n        for (var i = MAX_ITER; i; --i) {\n          /* rarely goes over 2 iterations */\n          var s = Math.sin(phi);\n          var t = 1 - es * s * s; //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n          //phi -= t * (t * Math.sqrt(t)) * k;\n\n          t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n          phi -= t;\n\n          if (Math.abs(t) < EPSLN) {\n            return phi;\n          }\n        } //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n\n\n        return phi;\n      };\n    }, {\n      \"./pj_mlfn\": 19\n    }],\n    19: [function (_dereq_, module, exports) {\n      module.exports = function (phi, sphi, cphi, en) {\n        cphi *= sphi;\n        sphi *= sphi;\n        return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));\n      };\n    }, {}],\n    20: [function (_dereq_, module, exports) {\n      module.exports = function (eccent, sinphi) {\n        var con;\n\n        if (eccent > 1.0e-7) {\n          con = eccent * sinphi;\n          return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n        } else {\n          return 2 * sinphi;\n        }\n      };\n    }, {}],\n    21: [function (_dereq_, module, exports) {\n      module.exports = function (x) {\n        return x < 0 ? -1 : 1;\n      };\n    }, {}],\n    22: [function (_dereq_, module, exports) {\n      module.exports = function (esinp, exp) {\n        return Math.pow((1 - esinp) / (1 + esinp), exp);\n      };\n    }, {}],\n    23: [function (_dereq_, module, exports) {\n      module.exports = function (array) {\n        var out = {\n          x: array[0],\n          y: array[1]\n        };\n\n        if (array.length > 2) {\n          out.z = array[2];\n        }\n\n        if (array.length > 3) {\n          out.m = array[3];\n        }\n\n        return out;\n      };\n    }, {}],\n    24: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n\n      module.exports = function (eccent, phi, sinphi) {\n        var con = eccent * sinphi;\n        var com = 0.5 * eccent;\n        con = Math.pow((1 - con) / (1 + con), com);\n        return Math.tan(0.5 * (HALF_PI - phi)) / con;\n      };\n    }, {}],\n    25: [function (_dereq_, module, exports) {\n      exports.wgs84 = {\n        towgs84: \"0,0,0\",\n        ellipse: \"WGS84\",\n        datumName: \"WGS84\"\n      };\n      exports.ch1903 = {\n        towgs84: \"674.374,15.056,405.346\",\n        ellipse: \"bessel\",\n        datumName: \"swiss\"\n      };\n      exports.ggrs87 = {\n        towgs84: \"-199.87,74.79,246.62\",\n        ellipse: \"GRS80\",\n        datumName: \"Greek_Geodetic_Reference_System_1987\"\n      };\n      exports.nad83 = {\n        towgs84: \"0,0,0\",\n        ellipse: \"GRS80\",\n        datumName: \"North_American_Datum_1983\"\n      };\n      exports.nad27 = {\n        nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n        ellipse: \"clrk66\",\n        datumName: \"North_American_Datum_1927\"\n      };\n      exports.potsdam = {\n        towgs84: \"606.0,23.0,413.0\",\n        ellipse: \"bessel\",\n        datumName: \"Potsdam Rauenberg 1950 DHDN\"\n      };\n      exports.carthage = {\n        towgs84: \"-263.0,6.0,431.0\",\n        ellipse: \"clark80\",\n        datumName: \"Carthage 1934 Tunisia\"\n      };\n      exports.hermannskogel = {\n        towgs84: \"653.0,-212.0,449.0\",\n        ellipse: \"bessel\",\n        datumName: \"Hermannskogel\"\n      };\n      exports.ire65 = {\n        towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n        ellipse: \"mod_airy\",\n        datumName: \"Ireland 1965\"\n      };\n      exports.rassadiran = {\n        towgs84: \"-133.63,-157.5,-158.62\",\n        ellipse: \"intl\",\n        datumName: \"Rassadiran\"\n      };\n      exports.nzgd49 = {\n        towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n        ellipse: \"intl\",\n        datumName: \"New Zealand Geodetic Datum 1949\"\n      };\n      exports.osgb36 = {\n        towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n        ellipse: \"airy\",\n        datumName: \"Airy 1830\"\n      };\n      exports.s_jtsk = {\n        towgs84: \"589,76,480\",\n        ellipse: 'bessel',\n        datumName: 'S-JTSK (Ferro)'\n      };\n      exports.beduaram = {\n        towgs84: '-106,-87,188',\n        ellipse: 'clrk80',\n        datumName: 'Beduaram'\n      };\n      exports.gunung_segara = {\n        towgs84: '-403,684,41',\n        ellipse: 'bessel',\n        datumName: 'Gunung Segara Jakarta'\n      };\n      exports.rnb72 = {\n        towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n        ellipse: \"intl\",\n        datumName: \"Reseau National Belge 1972\"\n      };\n    }, {}],\n    26: [function (_dereq_, module, exports) {\n      exports.MERIT = {\n        a: 6378137.0,\n        rf: 298.257,\n        ellipseName: \"MERIT 1983\"\n      };\n      exports.SGS85 = {\n        a: 6378136.0,\n        rf: 298.257,\n        ellipseName: \"Soviet Geodetic System 85\"\n      };\n      exports.GRS80 = {\n        a: 6378137.0,\n        rf: 298.257222101,\n        ellipseName: \"GRS 1980(IUGG, 1980)\"\n      };\n      exports.IAU76 = {\n        a: 6378140.0,\n        rf: 298.257,\n        ellipseName: \"IAU 1976\"\n      };\n      exports.airy = {\n        a: 6377563.396,\n        b: 6356256.910,\n        ellipseName: \"Airy 1830\"\n      };\n      exports.APL4 = {\n        a: 6378137,\n        rf: 298.25,\n        ellipseName: \"Appl. Physics. 1965\"\n      };\n      exports.NWL9D = {\n        a: 6378145.0,\n        rf: 298.25,\n        ellipseName: \"Naval Weapons Lab., 1965\"\n      };\n      exports.mod_airy = {\n        a: 6377340.189,\n        b: 6356034.446,\n        ellipseName: \"Modified Airy\"\n      };\n      exports.andrae = {\n        a: 6377104.43,\n        rf: 300.0,\n        ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n      };\n      exports.aust_SA = {\n        a: 6378160.0,\n        rf: 298.25,\n        ellipseName: \"Australian Natl & S. Amer. 1969\"\n      };\n      exports.GRS67 = {\n        a: 6378160.0,\n        rf: 298.2471674270,\n        ellipseName: \"GRS 67(IUGG 1967)\"\n      };\n      exports.bessel = {\n        a: 6377397.155,\n        rf: 299.1528128,\n        ellipseName: \"Bessel 1841\"\n      };\n      exports.bess_nam = {\n        a: 6377483.865,\n        rf: 299.1528128,\n        ellipseName: \"Bessel 1841 (Namibia)\"\n      };\n      exports.clrk66 = {\n        a: 6378206.4,\n        b: 6356583.8,\n        ellipseName: \"Clarke 1866\"\n      };\n      exports.clrk80 = {\n        a: 6378249.145,\n        rf: 293.4663,\n        ellipseName: \"Clarke 1880 mod.\"\n      };\n      exports.clrk58 = {\n        a: 6378293.645208759,\n        rf: 294.2606763692654,\n        ellipseName: \"Clarke 1858\"\n      };\n      exports.CPM = {\n        a: 6375738.7,\n        rf: 334.29,\n        ellipseName: \"Comm. des Poids et Mesures 1799\"\n      };\n      exports.delmbr = {\n        a: 6376428.0,\n        rf: 311.5,\n        ellipseName: \"Delambre 1810 (Belgium)\"\n      };\n      exports.engelis = {\n        a: 6378136.05,\n        rf: 298.2566,\n        ellipseName: \"Engelis 1985\"\n      };\n      exports.evrst30 = {\n        a: 6377276.345,\n        rf: 300.8017,\n        ellipseName: \"Everest 1830\"\n      };\n      exports.evrst48 = {\n        a: 6377304.063,\n        rf: 300.8017,\n        ellipseName: \"Everest 1948\"\n      };\n      exports.evrst56 = {\n        a: 6377301.243,\n        rf: 300.8017,\n        ellipseName: \"Everest 1956\"\n      };\n      exports.evrst69 = {\n        a: 6377295.664,\n        rf: 300.8017,\n        ellipseName: \"Everest 1969\"\n      };\n      exports.evrstSS = {\n        a: 6377298.556,\n        rf: 300.8017,\n        ellipseName: \"Everest (Sabah & Sarawak)\"\n      };\n      exports.fschr60 = {\n        a: 6378166.0,\n        rf: 298.3,\n        ellipseName: \"Fischer (Mercury Datum) 1960\"\n      };\n      exports.fschr60m = {\n        a: 6378155.0,\n        rf: 298.3,\n        ellipseName: \"Fischer 1960\"\n      };\n      exports.fschr68 = {\n        a: 6378150.0,\n        rf: 298.3,\n        ellipseName: \"Fischer 1968\"\n      };\n      exports.helmert = {\n        a: 6378200.0,\n        rf: 298.3,\n        ellipseName: \"Helmert 1906\"\n      };\n      exports.hough = {\n        a: 6378270.0,\n        rf: 297.0,\n        ellipseName: \"Hough\"\n      };\n      exports.intl = {\n        a: 6378388.0,\n        rf: 297.0,\n        ellipseName: \"International 1909 (Hayford)\"\n      };\n      exports.kaula = {\n        a: 6378163.0,\n        rf: 298.24,\n        ellipseName: \"Kaula 1961\"\n      };\n      exports.lerch = {\n        a: 6378139.0,\n        rf: 298.257,\n        ellipseName: \"Lerch 1979\"\n      };\n      exports.mprts = {\n        a: 6397300.0,\n        rf: 191.0,\n        ellipseName: \"Maupertius 1738\"\n      };\n      exports.new_intl = {\n        a: 6378157.5,\n        b: 6356772.2,\n        ellipseName: \"New International 1967\"\n      };\n      exports.plessis = {\n        a: 6376523.0,\n        rf: 6355863.0,\n        ellipseName: \"Plessis 1817 (France)\"\n      };\n      exports.krass = {\n        a: 6378245.0,\n        rf: 298.3,\n        ellipseName: \"Krassovsky, 1942\"\n      };\n      exports.SEasia = {\n        a: 6378155.0,\n        b: 6356773.3205,\n        ellipseName: \"Southeast Asia\"\n      };\n      exports.walbeck = {\n        a: 6376896.0,\n        b: 6355834.8467,\n        ellipseName: \"Walbeck\"\n      };\n      exports.WGS60 = {\n        a: 6378165.0,\n        rf: 298.3,\n        ellipseName: \"WGS 60\"\n      };\n      exports.WGS66 = {\n        a: 6378145.0,\n        rf: 298.25,\n        ellipseName: \"WGS 66\"\n      };\n      exports.WGS7 = {\n        a: 6378135.0,\n        rf: 298.26,\n        ellipseName: \"WGS 72\"\n      };\n      exports.WGS84 = {\n        a: 6378137.0,\n        rf: 298.257223563,\n        ellipseName: \"WGS 84\"\n      };\n      exports.sphere = {\n        a: 6370997.0,\n        b: 6370997.0,\n        ellipseName: \"Normal Sphere (r=6370997)\"\n      };\n    }, {}],\n    27: [function (_dereq_, module, exports) {\n      exports.greenwich = 0.0; //\"0dE\",\n\n      exports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\n\n      exports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\n\n      exports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\n\n      exports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\n\n      exports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\n\n      exports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\n\n      exports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\n\n      exports.ferro = -17.666666666667; //\"17d40'W\",\n\n      exports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\n\n      exports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\n\n      exports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\n\n      exports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n    }, {}],\n    28: [function (_dereq_, module, exports) {\n      exports.ft = {\n        to_meter: 0.3048\n      };\n      exports['us-ft'] = {\n        to_meter: 1200 / 3937\n      };\n    }, {}],\n    29: [function (_dereq_, module, exports) {\n      var proj = _dereq_('./Proj');\n\n      var transform = _dereq_('./transform');\n\n      var wgs84 = proj('WGS84');\n\n      function transformer(from, to, coords) {\n        var transformedArray;\n\n        if (Array.isArray(coords)) {\n          transformedArray = transform(from, to, coords);\n\n          if (coords.length === 3) {\n            return [transformedArray.x, transformedArray.y, transformedArray.z];\n          } else {\n            return [transformedArray.x, transformedArray.y];\n          }\n        } else {\n          return transform(from, to, coords);\n        }\n      }\n\n      function checkProj(item) {\n        if (item instanceof proj) {\n          return item;\n        }\n\n        if (item.oProj) {\n          return item.oProj;\n        }\n\n        return proj(item);\n      }\n\n      function proj4(fromProj, toProj, coord) {\n        fromProj = checkProj(fromProj);\n        var single = false;\n        var obj;\n\n        if (typeof toProj === 'undefined') {\n          toProj = fromProj;\n          fromProj = wgs84;\n          single = true;\n        } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n          coord = toProj;\n          toProj = fromProj;\n          fromProj = wgs84;\n          single = true;\n        }\n\n        toProj = checkProj(toProj);\n\n        if (coord) {\n          return transformer(fromProj, toProj, coord);\n        } else {\n          obj = {\n            forward: function forward(coords) {\n              return transformer(fromProj, toProj, coords);\n            },\n            inverse: function inverse(coords) {\n              return transformer(toProj, fromProj, coords);\n            }\n          };\n\n          if (single) {\n            obj.oProj = toProj;\n          }\n\n          return obj;\n        }\n      }\n\n      module.exports = proj4;\n    }, {\n      \"./Proj\": 2,\n      \"./transform\": 65\n    }],\n    30: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n      var PJD_3PARAM = 1;\n      var PJD_7PARAM = 2;\n      var PJD_GRIDSHIFT = 3;\n      var PJD_WGS84 = 4; // WGS84 or equivalent\n\n      var PJD_NODATUM = 5; // WGS84 or equivalent\n\n      var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n      var AD_C = 1.0026000;\n      var COS_67P5 = 0.38268343236508977;\n\n      var datum = function datum(proj) {\n        if (!(this instanceof datum)) {\n          return new datum(proj);\n        }\n\n        this.datum_type = PJD_WGS84; //default setting\n\n        if (!proj) {\n          return;\n        }\n\n        if (proj.datumCode && proj.datumCode === 'none') {\n          this.datum_type = PJD_NODATUM;\n        }\n\n        if (proj.datum_params) {\n          this.datum_params = proj.datum_params.map(parseFloat);\n\n          if (this.datum_params[0] !== 0 || this.datum_params[1] !== 0 || this.datum_params[2] !== 0) {\n            this.datum_type = PJD_3PARAM;\n          }\n\n          if (this.datum_params.length > 3) {\n            if (this.datum_params[3] !== 0 || this.datum_params[4] !== 0 || this.datum_params[5] !== 0 || this.datum_params[6] !== 0) {\n              this.datum_type = PJD_7PARAM;\n              this.datum_params[3] *= SEC_TO_RAD;\n              this.datum_params[4] *= SEC_TO_RAD;\n              this.datum_params[5] *= SEC_TO_RAD;\n              this.datum_params[6] = this.datum_params[6] / 1000000.0 + 1.0;\n            }\n          }\n        } // DGR 2011-03-21 : nadgrids support\n\n\n        this.datum_type = proj.grids ? PJD_GRIDSHIFT : this.datum_type;\n        this.a = proj.a; //datum object also uses these values\n\n        this.b = proj.b;\n        this.es = proj.es;\n        this.ep2 = proj.ep2;\n\n        if (this.datum_type === PJD_GRIDSHIFT) {\n          this.grids = proj.grids;\n        }\n      };\n\n      datum.prototype = {\n        /****************************************************************/\n        // cs_compare_datums()\n        //   Returns TRUE if the two datums match, otherwise FALSE.\n        compare_datums: function compare_datums(dest) {\n          if (this.datum_type !== dest.datum_type) {\n            return false; // false, datums are not equal\n          } else if (this.a !== dest.a || Math.abs(this.es - dest.es) > 0.000000000050) {\n            // the tolerence for es is to ensure that GRS80 and WGS84\n            // are considered identical\n            return false;\n          } else if (this.datum_type === PJD_3PARAM) {\n            return this.datum_params[0] === dest.datum_params[0] && this.datum_params[1] === dest.datum_params[1] && this.datum_params[2] === dest.datum_params[2];\n          } else if (this.datum_type === PJD_7PARAM) {\n            return this.datum_params[0] === dest.datum_params[0] && this.datum_params[1] === dest.datum_params[1] && this.datum_params[2] === dest.datum_params[2] && this.datum_params[3] === dest.datum_params[3] && this.datum_params[4] === dest.datum_params[4] && this.datum_params[5] === dest.datum_params[5] && this.datum_params[6] === dest.datum_params[6];\n          } else if (this.datum_type === PJD_GRIDSHIFT || dest.datum_type === PJD_GRIDSHIFT) {\n            //alert(\"ERROR: Grid shift transformations are not implemented.\");\n            //return false\n            //DGR 2012-07-29 lazy ...\n            return this.nadgrids === dest.nadgrids;\n          } else {\n            return true; // datums are equal\n          }\n        },\n        // cs_compare_datums()\n\n        /*\n         * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n         * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n         * according to the current ellipsoid parameters.\n         *\n         *    Latitude  : Geodetic latitude in radians                     (input)\n         *    Longitude : Geodetic longitude in radians                    (input)\n         *    Height    : Geodetic height, in meters                       (input)\n         *    X         : Calculated Geocentric X coordinate, in meters    (output)\n         *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n         *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n         *\n         */\n        geodetic_to_geocentric: function geodetic_to_geocentric(p) {\n          var Longitude = p.x;\n          var Latitude = p.y;\n          var Height = p.z ? p.z : 0; //Z value not always supplied\n\n          var X; // output\n\n          var Y;\n          var Z;\n          var Error_Code = 0; //  GEOCENT_NO_ERROR;\n\n          var Rn;\n          /*  Earth radius at location  */\n\n          var Sin_Lat;\n          /*  Math.sin(Latitude)  */\n\n          var Sin2_Lat;\n          /*  Square of Math.sin(Latitude)  */\n\n          var Cos_Lat;\n          /*  Math.cos(Latitude)  */\n\n          /*\n           ** Don't blow up if Latitude is just a little out of the value\n           ** range as it may just be a rounding issue.  Also removed longitude\n           ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n           */\n\n          if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n            Latitude = -HALF_PI;\n          } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n            Latitude = HALF_PI;\n          } else if (Latitude < -HALF_PI || Latitude > HALF_PI) {\n            /* Latitude out of range */\n            //..reportError('geocent:lat out of range:' + Latitude);\n            return null;\n          }\n\n          if (Longitude > Math.PI) {\n            Longitude -= 2 * Math.PI;\n          }\n\n          Sin_Lat = Math.sin(Latitude);\n          Cos_Lat = Math.cos(Latitude);\n          Sin2_Lat = Sin_Lat * Sin_Lat;\n          Rn = this.a / Math.sqrt(1.0e0 - this.es * Sin2_Lat);\n          X = (Rn + Height) * Cos_Lat * Math.cos(Longitude);\n          Y = (Rn + Height) * Cos_Lat * Math.sin(Longitude);\n          Z = (Rn * (1 - this.es) + Height) * Sin_Lat;\n          p.x = X;\n          p.y = Y;\n          p.z = Z;\n          return Error_Code;\n        },\n        // cs_geodetic_to_geocentric()\n        geocentric_to_geodetic: function geocentric_to_geodetic(p) {\n          /* local defintions and variables */\n\n          /* end-criterium of loop, accuracy of sin(Latitude) */\n          var genau = 1e-12;\n          var genau2 = genau * genau;\n          var maxiter = 30;\n          var P;\n          /* distance between semi-minor axis and location */\n\n          var RR;\n          /* distance between center and location */\n\n          var CT;\n          /* sin of geocentric latitude */\n\n          var ST;\n          /* cos of geocentric latitude */\n\n          var RX;\n          var RK;\n          var RN;\n          /* Earth radius at location */\n\n          var CPHI0;\n          /* cos of start or old geodetic latitude in iterations */\n\n          var SPHI0;\n          /* sin of start or old geodetic latitude in iterations */\n\n          var CPHI;\n          /* cos of searched geodetic latitude */\n\n          var SPHI;\n          /* sin of searched geodetic latitude */\n\n          var SDPHI;\n          /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n\n          var At_Pole;\n          /* indicates location is in polar region */\n\n          var iter;\n          /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n          var X = p.x;\n          var Y = p.y;\n          var Z = p.z ? p.z : 0.0; //Z value not always supplied\n\n          var Longitude;\n          var Latitude;\n          var Height;\n          At_Pole = false;\n          P = Math.sqrt(X * X + Y * Y);\n          RR = Math.sqrt(X * X + Y * Y + Z * Z);\n          /*      special cases for latitude and longitude */\n\n          if (P / this.a < genau) {\n            /*  special case, if P=0. (X=0., Y=0.) */\n            At_Pole = true;\n            Longitude = 0.0;\n            /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n             *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n\n            if (RR / this.a < genau) {\n              Latitude = HALF_PI;\n              Height = -this.b;\n              return;\n            }\n          } else {\n            /*  ellipsoidal (geodetic) longitude\n             *  interval: -PI < Longitude <= +PI */\n            Longitude = Math.atan2(Y, X);\n          }\n          /* --------------------------------------------------------------\n           * Following iterative algorithm was developped by\n           * \"Institut for Erdmessung\", University of Hannover, July 1988.\n           * Internet: www.ife.uni-hannover.de\n           * Iterative computation of CPHI,SPHI and Height.\n           * Iteration of CPHI and SPHI to 10**-12 radian resp.\n           * 2*10**-7 arcsec.\n           * --------------------------------------------------------------\n           */\n\n\n          CT = Z / RR;\n          ST = P / RR;\n          RX = 1.0 / Math.sqrt(1.0 - this.es * (2.0 - this.es) * ST * ST);\n          CPHI0 = ST * (1.0 - this.es) * RX;\n          SPHI0 = CT * RX;\n          iter = 0;\n          /* loop to find sin(Latitude) resp. Latitude\n           * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n\n          do {\n            iter++;\n            RN = this.a / Math.sqrt(1.0 - this.es * SPHI0 * SPHI0);\n            /*  ellipsoidal (geodetic) height */\n\n            Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - this.es * SPHI0 * SPHI0);\n            RK = this.es * RN / (RN + Height);\n            RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n            CPHI = ST * (1.0 - RK) * RX;\n            SPHI = CT * RX;\n            SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n            CPHI0 = CPHI;\n            SPHI0 = SPHI;\n          } while (SDPHI * SDPHI > genau2 && iter < maxiter);\n          /*      ellipsoidal (geodetic) latitude */\n\n\n          Latitude = Math.atan(SPHI / Math.abs(CPHI));\n          p.x = Longitude;\n          p.y = Latitude;\n          p.z = Height;\n          return p;\n        },\n        // cs_geocentric_to_geodetic()\n\n        /** Convert_Geocentric_To_Geodetic\n         * The method used here is derived from 'An Improved Algorithm for\n         * Geocentric to Geodetic Coordinate Conversion', by Ralph Toms, Feb 1996\n         */\n        geocentric_to_geodetic_noniter: function geocentric_to_geodetic_noniter(p) {\n          var X = p.x;\n          var Y = p.y;\n          var Z = p.z ? p.z : 0; //Z value not always supplied\n\n          var Longitude;\n          var Latitude;\n          var Height;\n          var W;\n          /* distance from Z axis */\n\n          var W2;\n          /* square of distance from Z axis */\n\n          var T0;\n          /* initial estimate of vertical component */\n\n          var T1;\n          /* corrected estimate of vertical component */\n\n          var S0;\n          /* initial estimate of horizontal component */\n\n          var S1;\n          /* corrected estimate of horizontal component */\n\n          var Sin_B0;\n          /* Math.sin(B0), B0 is estimate of Bowring aux variable */\n\n          var Sin3_B0;\n          /* cube of Math.sin(B0) */\n\n          var Cos_B0;\n          /* Math.cos(B0) */\n\n          var Sin_p1;\n          /* Math.sin(phi1), phi1 is estimated latitude */\n\n          var Cos_p1;\n          /* Math.cos(phi1) */\n\n          var Rn;\n          /* Earth radius at location */\n\n          var Sum;\n          /* numerator of Math.cos(phi1) */\n\n          var At_Pole;\n          /* indicates location is in polar region */\n\n          X = parseFloat(X); // cast from string to float\n\n          Y = parseFloat(Y);\n          Z = parseFloat(Z);\n          At_Pole = false;\n\n          if (X !== 0.0) {\n            Longitude = Math.atan2(Y, X);\n          } else {\n            if (Y > 0) {\n              Longitude = HALF_PI;\n            } else if (Y < 0) {\n              Longitude = -HALF_PI;\n            } else {\n              At_Pole = true;\n              Longitude = 0.0;\n\n              if (Z > 0.0) {\n                /* north pole */\n                Latitude = HALF_PI;\n              } else if (Z < 0.0) {\n                /* south pole */\n                Latitude = -HALF_PI;\n              } else {\n                /* center of earth */\n                Latitude = HALF_PI;\n                Height = -this.b;\n                return;\n              }\n            }\n          }\n\n          W2 = X * X + Y * Y;\n          W = Math.sqrt(W2);\n          T0 = Z * AD_C;\n          S0 = Math.sqrt(T0 * T0 + W2);\n          Sin_B0 = T0 / S0;\n          Cos_B0 = W / S0;\n          Sin3_B0 = Sin_B0 * Sin_B0 * Sin_B0;\n          T1 = Z + this.b * this.ep2 * Sin3_B0;\n          Sum = W - this.a * this.es * Cos_B0 * Cos_B0 * Cos_B0;\n          S1 = Math.sqrt(T1 * T1 + Sum * Sum);\n          Sin_p1 = T1 / S1;\n          Cos_p1 = Sum / S1;\n          Rn = this.a / Math.sqrt(1.0 - this.es * Sin_p1 * Sin_p1);\n\n          if (Cos_p1 >= COS_67P5) {\n            Height = W / Cos_p1 - Rn;\n          } else if (Cos_p1 <= -COS_67P5) {\n            Height = W / -Cos_p1 - Rn;\n          } else {\n            Height = Z / Sin_p1 + Rn * (this.es - 1.0);\n          }\n\n          if (At_Pole === false) {\n            Latitude = Math.atan(Sin_p1 / Cos_p1);\n          }\n\n          p.x = Longitude;\n          p.y = Latitude;\n          p.z = Height;\n          return p;\n        },\n        // geocentric_to_geodetic_noniter()\n\n        /****************************************************************/\n        // pj_geocentic_to_wgs84( p )\n        //  p = point to transform in geocentric coordinates (x,y,z)\n        geocentric_to_wgs84: function geocentric_to_wgs84(p) {\n          if (this.datum_type === PJD_3PARAM) {\n            // if( x[io] === HUGE_VAL )\n            //    continue;\n            p.x += this.datum_params[0];\n            p.y += this.datum_params[1];\n            p.z += this.datum_params[2];\n          } else if (this.datum_type === PJD_7PARAM) {\n            var Dx_BF = this.datum_params[0];\n            var Dy_BF = this.datum_params[1];\n            var Dz_BF = this.datum_params[2];\n            var Rx_BF = this.datum_params[3];\n            var Ry_BF = this.datum_params[4];\n            var Rz_BF = this.datum_params[5];\n            var M_BF = this.datum_params[6]; // if( x[io] === HUGE_VAL )\n            //    continue;\n\n            var x_out = M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF;\n            var y_out = M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF;\n            var z_out = M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF;\n            p.x = x_out;\n            p.y = y_out;\n            p.z = z_out;\n          }\n        },\n        // cs_geocentric_to_wgs84\n\n        /****************************************************************/\n        // pj_geocentic_from_wgs84()\n        //  coordinate system definition,\n        //  point to transform in geocentric coordinates (x,y,z)\n        geocentric_from_wgs84: function geocentric_from_wgs84(p) {\n          if (this.datum_type === PJD_3PARAM) {\n            //if( x[io] === HUGE_VAL )\n            //    continue;\n            p.x -= this.datum_params[0];\n            p.y -= this.datum_params[1];\n            p.z -= this.datum_params[2];\n          } else if (this.datum_type === PJD_7PARAM) {\n            var Dx_BF = this.datum_params[0];\n            var Dy_BF = this.datum_params[1];\n            var Dz_BF = this.datum_params[2];\n            var Rx_BF = this.datum_params[3];\n            var Ry_BF = this.datum_params[4];\n            var Rz_BF = this.datum_params[5];\n            var M_BF = this.datum_params[6];\n            var x_tmp = (p.x - Dx_BF) / M_BF;\n            var y_tmp = (p.y - Dy_BF) / M_BF;\n            var z_tmp = (p.z - Dz_BF) / M_BF; //if( x[io] === HUGE_VAL )\n            //    continue;\n\n            p.x = x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp;\n            p.y = -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp;\n            p.z = Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp;\n          } //cs_geocentric_from_wgs84()\n\n        }\n      };\n      /** point object, nothing fancy, just allows values to be\n          passed back and forth by reference rather than by value.\n          Other point classes may be used as long as they have\n          x and y properties, which will get modified in the transform method.\n      */\n\n      module.exports = datum;\n    }, {}],\n    31: [function (_dereq_, module, exports) {\n      var PJD_3PARAM = 1;\n      var PJD_7PARAM = 2;\n      var PJD_GRIDSHIFT = 3;\n      var PJD_NODATUM = 5; // WGS84 or equivalent\n\n      var SRS_WGS84_SEMIMAJOR = 6378137; // only used in grid shift transforms\n\n      var SRS_WGS84_ESQUARED = 0.006694379990141316; //DGR: 2012-07-29\n\n      module.exports = function (source, dest, point) {\n        var wp, i, l;\n\n        function checkParams(fallback) {\n          return fallback === PJD_3PARAM || fallback === PJD_7PARAM;\n        } // Short cut if the datums are identical.\n\n\n        if (source.compare_datums(dest)) {\n          return point; // in this case, zero is sucess,\n          // whereas cs_compare_datums returns 1 to indicate TRUE\n          // confusing, should fix this\n        } // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n\n\n        if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n          return point;\n        } //DGR: 2012-07-29 : add nadgrids support (begin)\n\n\n        var src_a = source.a;\n        var src_es = source.es;\n        var dst_a = dest.a;\n        var dst_es = dest.es;\n        var fallback = source.datum_type; // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n        if (fallback === PJD_GRIDSHIFT) {\n          if (this.apply_gridshift(source, 0, point) === 0) {\n            source.a = SRS_WGS84_SEMIMAJOR;\n            source.es = SRS_WGS84_ESQUARED;\n          } else {\n            // try 3 or 7 params transformation or nothing ?\n            if (!source.datum_params) {\n              source.a = src_a;\n              source.es = source.es;\n              return point;\n            }\n\n            wp = 1;\n\n            for (i = 0, l = source.datum_params.length; i < l; i++) {\n              wp *= source.datum_params[i];\n            }\n\n            if (wp === 0) {\n              source.a = src_a;\n              source.es = source.es;\n              return point;\n            }\n\n            if (source.datum_params.length > 3) {\n              fallback = PJD_7PARAM;\n            } else {\n              fallback = PJD_3PARAM;\n            }\n          }\n        }\n\n        if (dest.datum_type === PJD_GRIDSHIFT) {\n          dest.a = SRS_WGS84_SEMIMAJOR;\n          dest.es = SRS_WGS84_ESQUARED;\n        } // Do we need to go through geocentric coordinates?\n\n\n        if (source.es !== dest.es || source.a !== dest.a || checkParams(fallback) || checkParams(dest.datum_type)) {\n          //DGR: 2012-07-29 : add nadgrids support (end)\n          // Convert to geocentric coordinates.\n          source.geodetic_to_geocentric(point); // CHECK_RETURN;\n          // Convert between datums\n\n          if (checkParams(source.datum_type)) {\n            source.geocentric_to_wgs84(point); // CHECK_RETURN;\n          }\n\n          if (checkParams(dest.datum_type)) {\n            dest.geocentric_from_wgs84(point); // CHECK_RETURN;\n          } // Convert back to geodetic coordinates\n\n\n          dest.geocentric_to_geodetic(point); // CHECK_RETURN;\n        } // Apply grid shift to destination if required\n\n\n        if (dest.datum_type === PJD_GRIDSHIFT) {\n          this.apply_gridshift(dest, 1, point); // CHECK_RETURN;\n        }\n\n        source.a = src_a;\n        source.es = src_es;\n        dest.a = dst_a;\n        dest.es = dst_es;\n        return point;\n      };\n    }, {}],\n    32: [function (_dereq_, module, exports) {\n      var globals = _dereq_('./global');\n\n      var parseProj = _dereq_('./projString');\n\n      var wkt = _dereq_('./wkt');\n\n      function defs(name) {\n        /*global console*/\n        var that = this;\n\n        if (arguments.length === 2) {\n          var def = arguments[1];\n\n          if (typeof def === 'string') {\n            if (def.charAt(0) === '+') {\n              defs[name] = parseProj(arguments[1]);\n            } else {\n              defs[name] = wkt(arguments[1]);\n            }\n          } else {\n            defs[name] = def;\n          }\n        } else if (arguments.length === 1) {\n          if (Array.isArray(name)) {\n            return name.map(function (v) {\n              if (Array.isArray(v)) {\n                defs.apply(that, v);\n              } else {\n                defs(v);\n              }\n            });\n          } else if (typeof name === 'string') {\n            if (name in defs) {\n              return defs[name];\n            }\n          } else if ('EPSG' in name) {\n            defs['EPSG:' + name.EPSG] = name;\n          } else if ('ESRI' in name) {\n            defs['ESRI:' + name.ESRI] = name;\n          } else if ('IAU2000' in name) {\n            defs['IAU2000:' + name.IAU2000] = name;\n          } else {\n            console.log(name);\n          }\n\n          return;\n        }\n      }\n\n      globals(defs);\n      module.exports = defs;\n    }, {\n      \"./global\": 35,\n      \"./projString\": 38,\n      \"./wkt\": 66\n    }],\n    33: [function (_dereq_, module, exports) {\n      var Datum = _dereq_('./constants/Datum');\n\n      var Ellipsoid = _dereq_('./constants/Ellipsoid');\n\n      var extend = _dereq_('./extend');\n\n      var datum = _dereq_('./datum');\n\n      var EPSLN = 1.0e-10; // ellipoid pj_set_ell.c\n\n      var SIXTH = 0.1666666666666666667;\n      /* 1/6 */\n\n      var RA4 = 0.04722222222222222222;\n      /* 17/360 */\n\n      var RA6 = 0.02215608465608465608;\n\n      module.exports = function (json) {\n        // DGR 2011-03-20 : nagrids -> nadgrids\n        if (json.datumCode && json.datumCode !== 'none') {\n          var datumDef = Datum[json.datumCode];\n\n          if (datumDef) {\n            json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n            json.ellps = datumDef.ellipse;\n            json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n          }\n        }\n\n        if (!json.a) {\n          // do we have an ellipsoid?\n          var ellipse = Ellipsoid[json.ellps] ? Ellipsoid[json.ellps] : Ellipsoid.WGS84;\n          extend(json, ellipse);\n        }\n\n        if (json.rf && !json.b) {\n          json.b = (1.0 - 1.0 / json.rf) * json.a;\n        }\n\n        if (json.rf === 0 || Math.abs(json.a - json.b) < EPSLN) {\n          json.sphere = true;\n          json.b = json.a;\n        }\n\n        json.a2 = json.a * json.a; // used in geocentric\n\n        json.b2 = json.b * json.b; // used in geocentric\n\n        json.es = (json.a2 - json.b2) / json.a2; // e ^ 2\n\n        json.e = Math.sqrt(json.es); // eccentricity\n\n        if (json.R_A) {\n          json.a *= 1 - json.es * (SIXTH + json.es * (RA4 + json.es * RA6));\n          json.a2 = json.a * json.a;\n          json.b2 = json.b * json.b;\n          json.es = 0;\n        }\n\n        json.ep2 = (json.a2 - json.b2) / json.b2; // used in geocentric\n\n        if (!json.k0) {\n          json.k0 = 1.0; //default value\n        } //DGR 2010-11-12: axis\n\n\n        if (!json.axis) {\n          json.axis = \"enu\";\n        }\n\n        if (!json.datum) {\n          json.datum = datum(json);\n        }\n\n        return json;\n      };\n    }, {\n      \"./constants/Datum\": 25,\n      \"./constants/Ellipsoid\": 26,\n      \"./datum\": 30,\n      \"./extend\": 34\n    }],\n    34: [function (_dereq_, module, exports) {\n      module.exports = function (destination, source) {\n        destination = destination || {};\n        var value, property;\n\n        if (!source) {\n          return destination;\n        }\n\n        for (property in source) {\n          value = source[property];\n\n          if (value !== undefined) {\n            destination[property] = value;\n          }\n        }\n\n        return destination;\n      };\n    }, {}],\n    35: [function (_dereq_, module, exports) {\n      module.exports = function (defs) {\n        defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n        defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n        defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n        defs.WGS84 = defs['EPSG:4326'];\n        defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n\n        defs.GOOGLE = defs['EPSG:3857'];\n        defs['EPSG:900913'] = defs['EPSG:3857'];\n        defs['EPSG:102113'] = defs['EPSG:3857'];\n      };\n    }, {}],\n    36: [function (_dereq_, module, exports) {\n      var proj4 = _dereq_('./core');\n\n      proj4.defaultDatum = 'WGS84'; //default datum\n\n      proj4.Proj = _dereq_('./Proj');\n      proj4.WGS84 = new proj4.Proj('WGS84');\n      proj4.Point = _dereq_('./Point');\n      proj4.toPoint = _dereq_(\"./common/toPoint\");\n      proj4.defs = _dereq_('./defs');\n      proj4.transform = _dereq_('./transform');\n      proj4.mgrs = _dereq_('mgrs');\n      proj4.version = _dereq_('../package.json').version;\n\n      _dereq_('./includedProjections')(proj4);\n\n      module.exports = proj4;\n    }, {\n      \"../package.json\": 68,\n      \"./Point\": 1,\n      \"./Proj\": 2,\n      \"./common/toPoint\": 23,\n      \"./core\": 29,\n      \"./defs\": 32,\n      \"./includedProjections\": \"hTEDpn\",\n      \"./transform\": 65,\n      \"mgrs\": 67\n    }],\n    37: [function (_dereq_, module, exports) {\n      var defs = _dereq_('./defs');\n\n      var wkt = _dereq_('./wkt');\n\n      var projStr = _dereq_('./projString');\n\n      function testObj(code) {\n        return typeof code === 'string';\n      }\n\n      function testDef(code) {\n        return code in defs;\n      }\n\n      function testWKT(code) {\n        var codeWords = ['GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS'];\n        return codeWords.reduce(function (a, b) {\n          return a + 1 + code.indexOf(b);\n        }, 0);\n      }\n\n      function testProj(code) {\n        return code[0] === '+';\n      }\n\n      function parse(code) {\n        if (testObj(code)) {\n          //check to see if this is a WKT string\n          if (testDef(code)) {\n            return defs[code];\n          } else if (testWKT(code)) {\n            return wkt(code);\n          } else if (testProj(code)) {\n            return projStr(code);\n          }\n        } else {\n          return code;\n        }\n      }\n\n      module.exports = parse;\n    }, {\n      \"./defs\": 32,\n      \"./projString\": 38,\n      \"./wkt\": 66\n    }],\n    38: [function (_dereq_, module, exports) {\n      var D2R = 0.01745329251994329577;\n\n      var PrimeMeridian = _dereq_('./constants/PrimeMeridian');\n\n      var _units = _dereq_('./constants/units');\n\n      module.exports = function (defData) {\n        var self = {};\n        var paramObj = {};\n        defData.split(\"+\").map(function (v) {\n          return v.trim();\n        }).filter(function (a) {\n          return a;\n        }).forEach(function (a) {\n          var split = a.split(\"=\");\n          split.push(true);\n          paramObj[split[0].toLowerCase()] = split[1];\n        });\n        var paramName, paramVal, paramOutname;\n        var params = {\n          proj: 'projName',\n          datum: 'datumCode',\n          rf: function rf(v) {\n            self.rf = parseFloat(v);\n          },\n          lat_0: function lat_0(v) {\n            self.lat0 = v * D2R;\n          },\n          lat_1: function lat_1(v) {\n            self.lat1 = v * D2R;\n          },\n          lat_2: function lat_2(v) {\n            self.lat2 = v * D2R;\n          },\n          lat_ts: function lat_ts(v) {\n            self.lat_ts = v * D2R;\n          },\n          lon_0: function lon_0(v) {\n            self.long0 = v * D2R;\n          },\n          lon_1: function lon_1(v) {\n            self.long1 = v * D2R;\n          },\n          lon_2: function lon_2(v) {\n            self.long2 = v * D2R;\n          },\n          alpha: function alpha(v) {\n            self.alpha = parseFloat(v) * D2R;\n          },\n          lonc: function lonc(v) {\n            self.longc = v * D2R;\n          },\n          x_0: function x_0(v) {\n            self.x0 = parseFloat(v);\n          },\n          y_0: function y_0(v) {\n            self.y0 = parseFloat(v);\n          },\n          k_0: function k_0(v) {\n            self.k0 = parseFloat(v);\n          },\n          k: function k(v) {\n            self.k0 = parseFloat(v);\n          },\n          a: function a(v) {\n            self.a = parseFloat(v);\n          },\n          b: function b(v) {\n            self.b = parseFloat(v);\n          },\n          r_a: function r_a() {\n            self.R_A = true;\n          },\n          zone: function zone(v) {\n            self.zone = parseInt(v, 10);\n          },\n          south: function south() {\n            self.utmSouth = true;\n          },\n          towgs84: function towgs84(v) {\n            self.datum_params = v.split(\",\").map(function (a) {\n              return parseFloat(a);\n            });\n          },\n          to_meter: function to_meter(v) {\n            self.to_meter = parseFloat(v);\n          },\n          units: function units(v) {\n            self.units = v;\n\n            if (_units[v]) {\n              self.to_meter = _units[v].to_meter;\n            }\n          },\n          from_greenwich: function from_greenwich(v) {\n            self.from_greenwich = v * D2R;\n          },\n          pm: function pm(v) {\n            self.from_greenwich = (PrimeMeridian[v] ? PrimeMeridian[v] : parseFloat(v)) * D2R;\n          },\n          nadgrids: function nadgrids(v) {\n            if (v === '@null') {\n              self.datumCode = 'none';\n            } else {\n              self.nadgrids = v;\n            }\n          },\n          axis: function axis(v) {\n            var legalAxis = \"ewnsud\";\n\n            if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n              self.axis = v;\n            }\n          }\n        };\n\n        for (paramName in paramObj) {\n          paramVal = paramObj[paramName];\n\n          if (paramName in params) {\n            paramOutname = params[paramName];\n\n            if (typeof paramOutname === 'function') {\n              paramOutname(paramVal);\n            } else {\n              self[paramOutname] = paramVal;\n            }\n          } else {\n            self[paramName] = paramVal;\n          }\n        }\n\n        if (typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\") {\n          self.datumCode = self.datumCode.toLowerCase();\n        }\n\n        return self;\n      };\n    }, {\n      \"./constants/PrimeMeridian\": 27,\n      \"./constants/units\": 28\n    }],\n    39: [function (_dereq_, module, exports) {\n      var projs = [_dereq_('./projections/merc'), _dereq_('./projections/longlat')];\n      var names = {};\n      var projStore = [];\n\n      function add(proj, i) {\n        var len = projStore.length;\n\n        if (!proj.names) {\n          console.log(i);\n          return true;\n        }\n\n        projStore[len] = proj;\n        proj.names.forEach(function (n) {\n          names[n.toLowerCase()] = len;\n        });\n        return this;\n      }\n\n      exports.add = add;\n\n      exports.get = function (name) {\n        if (!name) {\n          return false;\n        }\n\n        var n = name.toLowerCase();\n\n        if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n          return projStore[names[n]];\n        }\n      };\n\n      exports.start = function () {\n        projs.forEach(add);\n      };\n    }, {\n      \"./projections/longlat\": 51,\n      \"./projections/merc\": 52\n    }],\n    40: [function (_dereq_, module, exports) {\n      var EPSLN = 1.0e-10;\n\n      var msfnz = _dereq_('../common/msfnz');\n\n      var qsfnz = _dereq_('../common/qsfnz');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var asinz = _dereq_('../common/asinz');\n\n      exports.init = function () {\n        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n          return;\n        }\n\n        this.temp = this.b / this.a;\n        this.es = 1 - Math.pow(this.temp, 2);\n        this.e3 = Math.sqrt(this.es);\n        this.sin_po = Math.sin(this.lat1);\n        this.cos_po = Math.cos(this.lat1);\n        this.t1 = this.sin_po;\n        this.con = this.sin_po;\n        this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n        this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n        this.sin_po = Math.sin(this.lat2);\n        this.cos_po = Math.cos(this.lat2);\n        this.t2 = this.sin_po;\n        this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n        this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n        this.sin_po = Math.sin(this.lat0);\n        this.cos_po = Math.cos(this.lat0);\n        this.t3 = this.sin_po;\n        this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n        if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n          this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n        } else {\n          this.ns0 = this.con;\n        }\n\n        this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n        this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n      };\n      /* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n        -------------------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        this.sin_phi = Math.sin(lat);\n        this.cos_phi = Math.cos(lat);\n        var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n        var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n        var theta = this.ns0 * adjust_lon(lon - this.long0);\n        var x = rh1 * Math.sin(theta) + this.x0;\n        var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var rh1, qs, con, theta, lon, lat;\n        p.x -= this.x0;\n        p.y = this.rh - p.y + this.y0;\n\n        if (this.ns0 >= 0) {\n          rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n          con = 1;\n        } else {\n          rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n          con = -1;\n        }\n\n        theta = 0;\n\n        if (rh1 !== 0) {\n          theta = Math.atan2(con * p.x, con * p.y);\n        }\n\n        con = rh1 * this.ns0 / this.a;\n\n        if (this.sphere) {\n          lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n        } else {\n          qs = (this.c - con * con) / this.ns0;\n          lat = this.phi1z(this.e3, qs);\n        }\n\n        lon = adjust_lon(theta / this.ns0 + this.long0);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n      /* Function to compute phi1, the latitude for the inverse of the\n         Albers Conical Equal-Area projection.\n      -------------------------------------------*/\n\n\n      exports.phi1z = function (eccent, qs) {\n        var sinphi, cosphi, con, com, dphi;\n        var phi = asinz(0.5 * qs);\n\n        if (eccent < EPSLN) {\n          return phi;\n        }\n\n        var eccnts = eccent * eccent;\n\n        for (var i = 1; i <= 25; i++) {\n          sinphi = Math.sin(phi);\n          cosphi = Math.cos(phi);\n          con = eccent * sinphi;\n          com = 1 - con * con;\n          dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n          phi = phi + dphi;\n\n          if (Math.abs(dphi) <= 1e-7) {\n            return phi;\n          }\n        }\n\n        return null;\n      };\n\n      exports.names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6,\n      \"../common/msfnz\": 15,\n      \"../common/qsfnz\": 20\n    }],\n    41: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      var mlfn = _dereq_('../common/mlfn');\n\n      var e0fn = _dereq_('../common/e0fn');\n\n      var e1fn = _dereq_('../common/e1fn');\n\n      var e2fn = _dereq_('../common/e2fn');\n\n      var e3fn = _dereq_('../common/e3fn');\n\n      var gN = _dereq_('../common/gN');\n\n      var asinz = _dereq_('../common/asinz');\n\n      var imlfn = _dereq_('../common/imlfn');\n\n      exports.init = function () {\n        this.sin_p12 = Math.sin(this.lat0);\n        this.cos_p12 = Math.cos(this.lat0);\n      };\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var sinphi = Math.sin(p.y);\n        var cosphi = Math.cos(p.y);\n        var dlon = adjust_lon(lon - this.long0);\n        var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n\n        if (this.sphere) {\n          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n            //North Pole case\n            p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n            p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n            return p;\n          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n            //South Pole case\n            p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n            p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n            return p;\n          } else {\n            //default case\n            cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n            c = Math.acos(cos_c);\n            kp = c / Math.sin(c);\n            p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n            p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n            return p;\n          }\n        } else {\n          e0 = e0fn(this.es);\n          e1 = e1fn(this.es);\n          e2 = e2fn(this.es);\n          e3 = e3fn(this.es);\n\n          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n            //North Pole case\n            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n            Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n            p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n            p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n            return p;\n          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n            //South Pole case\n            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n            Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n            p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n            p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n            return p;\n          } else {\n            //Default case\n            tanphi = sinphi / cosphi;\n            Nl1 = gN(this.a, this.e, this.sin_p12);\n            Nl = gN(this.a, this.e, sinphi);\n            psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n            Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n\n            if (Az === 0) {\n              s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n            } else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n              s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n            } else {\n              s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n            }\n\n            G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n            H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n            GH = G * H;\n            Hs = H * H;\n            s2 = s * s;\n            s3 = s2 * s;\n            s4 = s3 * s;\n            s5 = s4 * s;\n            c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n            p.x = this.x0 + c * Math.sin(Az);\n            p.y = this.y0 + c * Math.cos(Az);\n            return p;\n          }\n        }\n      };\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n\n        if (this.sphere) {\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\n          if (rh > 2 * HALF_PI * this.a) {\n            return;\n          }\n\n          z = rh / this.a;\n          sinz = Math.sin(z);\n          cosz = Math.cos(z);\n          lon = this.long0;\n\n          if (Math.abs(rh) <= EPSLN) {\n            lat = this.lat0;\n          } else {\n            lat = asinz(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);\n            con = Math.abs(this.lat0) - HALF_PI;\n\n            if (Math.abs(con) <= EPSLN) {\n              if (this.lat0 >= 0) {\n                lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));\n              } else {\n                lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n              }\n            } else {\n              /*con = cosz - this.sin_p12 * Math.sin(lat);\n              if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n                //no-op, just keep the lon value as is\n              } else {\n                var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n                lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n              }*/\n              lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n            }\n          }\n\n          p.x = lon;\n          p.y = lat;\n          return p;\n        } else {\n          e0 = e0fn(this.es);\n          e1 = e1fn(this.es);\n          e2 = e2fn(this.es);\n          e3 = e3fn(this.es);\n\n          if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n            //North pole case\n            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n            rh = Math.sqrt(p.x * p.x + p.y * p.y);\n            M = Mlp - rh;\n            lat = imlfn(M / this.a, e0, e1, e2, e3);\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n            p.x = lon;\n            p.y = lat;\n            return p;\n          } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n            //South pole case\n            Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n            rh = Math.sqrt(p.x * p.x + p.y * p.y);\n            M = rh - Mlp;\n            lat = imlfn(M / this.a, e0, e1, e2, e3);\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n            p.x = lon;\n            p.y = lat;\n            return p;\n          } else {\n            //default case\n            rh = Math.sqrt(p.x * p.x + p.y * p.y);\n            Az = Math.atan2(p.x, p.y);\n            N1 = gN(this.a, this.e, this.sin_p12);\n            cosAz = Math.cos(Az);\n            tmp = this.e * this.cos_p12 * cosAz;\n            A = -tmp * tmp / (1 - this.es);\n            B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n            D = rh / N1;\n            Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n            F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n            psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n            lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n            lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n            p.x = lon;\n            p.y = lat;\n            return p;\n          }\n        }\n      };\n\n      exports.names = [\"Azimuthal_Equidistant\", \"aeqd\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6,\n      \"../common/e0fn\": 7,\n      \"../common/e1fn\": 8,\n      \"../common/e2fn\": 9,\n      \"../common/e3fn\": 10,\n      \"../common/gN\": 11,\n      \"../common/imlfn\": 12,\n      \"../common/mlfn\": 14\n    }],\n    42: [function (_dereq_, module, exports) {\n      var mlfn = _dereq_('../common/mlfn');\n\n      var e0fn = _dereq_('../common/e0fn');\n\n      var e1fn = _dereq_('../common/e1fn');\n\n      var e2fn = _dereq_('../common/e2fn');\n\n      var e3fn = _dereq_('../common/e3fn');\n\n      var gN = _dereq_('../common/gN');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var adjust_lat = _dereq_('../common/adjust_lat');\n\n      var imlfn = _dereq_('../common/imlfn');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      exports.init = function () {\n        if (!this.sphere) {\n          this.e0 = e0fn(this.es);\n          this.e1 = e1fn(this.es);\n          this.e2 = e2fn(this.es);\n          this.e3 = e3fn(this.es);\n          this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n        }\n      };\n      /* Cassini forward equations--mapping lat,long to x,y\n        -----------------------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        /* Forward equations\n            -----------------*/\n        var x, y;\n        var lam = p.x;\n        var phi = p.y;\n        lam = adjust_lon(lam - this.long0);\n\n        if (this.sphere) {\n          x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n          y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n        } else {\n          //ellipsoid\n          var sinphi = Math.sin(phi);\n          var cosphi = Math.cos(phi);\n          var nl = gN(this.a, this.e, sinphi);\n          var tl = Math.tan(phi) * Math.tan(phi);\n          var al = lam * Math.cos(phi);\n          var asq = al * al;\n          var cl = this.es * cosphi * cosphi / (1 - this.es);\n          var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n          x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n          y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n        }\n\n        p.x = x + this.x0;\n        p.y = y + this.y0;\n        return p;\n      };\n      /* Inverse equations\n        -----------------*/\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var x = p.x / this.a;\n        var y = p.y / this.a;\n        var phi, lam;\n\n        if (this.sphere) {\n          var dd = y + this.lat0;\n          phi = Math.asin(Math.sin(dd) * Math.cos(x));\n          lam = Math.atan2(Math.tan(x), Math.cos(dd));\n        } else {\n          /* ellipsoid */\n          var ml1 = this.ml0 / this.a + y;\n          var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n\n          if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n            p.x = this.long0;\n            p.y = HALF_PI;\n\n            if (y < 0) {\n              p.y *= -1;\n            }\n\n            return p;\n          }\n\n          var nl1 = gN(this.a, this.e, Math.sin(phi1));\n          var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n          var tl1 = Math.pow(Math.tan(phi1), 2);\n          var dl = x * this.a / nl1;\n          var dsq = dl * dl;\n          phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n          lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n        }\n\n        p.x = adjust_lon(lam + this.long0);\n        p.y = adjust_lat(phi);\n        return p;\n      };\n\n      exports.names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\n    }, {\n      \"../common/adjust_lat\": 4,\n      \"../common/adjust_lon\": 5,\n      \"../common/e0fn\": 7,\n      \"../common/e1fn\": 8,\n      \"../common/e2fn\": 9,\n      \"../common/e3fn\": 10,\n      \"../common/gN\": 11,\n      \"../common/imlfn\": 12,\n      \"../common/mlfn\": 14\n    }],\n    43: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var qsfnz = _dereq_('../common/qsfnz');\n\n      var msfnz = _dereq_('../common/msfnz');\n\n      var iqsfnz = _dereq_('../common/iqsfnz');\n      /*\n        reference:  \n          \"Cartographic Projection Procedures for the UNIX Environment-\n          A User's Manual\" by Gerald I. Evenden,\n          USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n      */\n\n\n      exports.init = function () {\n        //no-op\n        if (!this.sphere) {\n          this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n        }\n      };\n      /* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n          ------------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var x, y;\n        /* Forward equations\n            -----------------*/\n\n        var dlon = adjust_lon(lon - this.long0);\n\n        if (this.sphere) {\n          x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n          y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n        } else {\n          var qs = qsfnz(this.e, Math.sin(lat));\n          x = this.x0 + this.a * this.k0 * dlon;\n          y = this.y0 + this.a * qs * 0.5 / this.k0;\n        }\n\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n      /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n          ------------------------------------------------------------*/\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var lon, lat;\n\n        if (this.sphere) {\n          lon = adjust_lon(this.long0 + p.x / this.a / Math.cos(this.lat_ts));\n          lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));\n        } else {\n          lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n          lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"cea\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/iqsfnz\": 13,\n      \"../common/msfnz\": 15,\n      \"../common/qsfnz\": 20\n    }],\n    44: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var adjust_lat = _dereq_('../common/adjust_lat');\n\n      exports.init = function () {\n        this.x0 = this.x0 || 0;\n        this.y0 = this.y0 || 0;\n        this.lat0 = this.lat0 || 0;\n        this.long0 = this.long0 || 0;\n        this.lat_ts = this.lat_ts || 0;\n        this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n        this.rc = Math.cos(this.lat_ts);\n      }; // forward equations--mapping lat,long to x,y\n      // -----------------------------------------------------------------\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var dlon = adjust_lon(lon - this.long0);\n        var dlat = adjust_lat(lat - this.lat0);\n        p.x = this.x0 + this.a * dlon * this.rc;\n        p.y = this.y0 + this.a * dlat;\n        return p;\n      }; // inverse equations--mapping x,y to lat/long\n      // -----------------------------------------------------------------\n\n\n      exports.inverse = function (p) {\n        var x = p.x;\n        var y = p.y;\n        p.x = adjust_lon(this.long0 + (x - this.x0) / (this.a * this.rc));\n        p.y = adjust_lat(this.lat0 + (y - this.y0) / this.a);\n        return p;\n      };\n\n      exports.names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\n    }, {\n      \"../common/adjust_lat\": 4,\n      \"../common/adjust_lon\": 5\n    }],\n    45: [function (_dereq_, module, exports) {\n      var e0fn = _dereq_('../common/e0fn');\n\n      var e1fn = _dereq_('../common/e1fn');\n\n      var e2fn = _dereq_('../common/e2fn');\n\n      var e3fn = _dereq_('../common/e3fn');\n\n      var msfnz = _dereq_('../common/msfnz');\n\n      var mlfn = _dereq_('../common/mlfn');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var adjust_lat = _dereq_('../common/adjust_lat');\n\n      var imlfn = _dereq_('../common/imlfn');\n\n      var EPSLN = 1.0e-10;\n\n      exports.init = function () {\n        /* Place parameters in static storage for common use\n            -------------------------------------------------*/\n        // Standard Parallels cannot be equal and on opposite sides of the equator\n        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n          return;\n        }\n\n        this.lat2 = this.lat2 || this.lat1;\n        this.temp = this.b / this.a;\n        this.es = 1 - Math.pow(this.temp, 2);\n        this.e = Math.sqrt(this.es);\n        this.e0 = e0fn(this.es);\n        this.e1 = e1fn(this.es);\n        this.e2 = e2fn(this.es);\n        this.e3 = e3fn(this.es);\n        this.sinphi = Math.sin(this.lat1);\n        this.cosphi = Math.cos(this.lat1);\n        this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n        this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n        if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n          this.ns = this.sinphi;\n        } else {\n          this.sinphi = Math.sin(this.lat2);\n          this.cosphi = Math.cos(this.lat2);\n          this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n          this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n          this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n        }\n\n        this.g = this.ml1 + this.ms1 / this.ns;\n        this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n        this.rh = this.a * (this.g - this.ml0);\n      };\n      /* Equidistant Conic forward equations--mapping lat,long to x,y\n        -----------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var rh1;\n        /* Forward equations\n            -----------------*/\n\n        if (this.sphere) {\n          rh1 = this.a * (this.g - lat);\n        } else {\n          var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n          rh1 = this.a * (this.g - ml);\n        }\n\n        var theta = this.ns * adjust_lon(lon - this.long0);\n        var x = this.x0 + rh1 * Math.sin(theta);\n        var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n      /* Inverse equations\n        -----------------*/\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y = this.rh - p.y + this.y0;\n        var con, rh1, lat, lon;\n\n        if (this.ns >= 0) {\n          rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n          con = 1;\n        } else {\n          rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n          con = -1;\n        }\n\n        var theta = 0;\n\n        if (rh1 !== 0) {\n          theta = Math.atan2(con * p.x, con * p.y);\n        }\n\n        if (this.sphere) {\n          lon = adjust_lon(this.long0 + theta / this.ns);\n          lat = adjust_lat(this.g - rh1 / this.a);\n          p.x = lon;\n          p.y = lat;\n          return p;\n        } else {\n          var ml = this.g - rh1 / this.a;\n          lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n          lon = adjust_lon(this.long0 + theta / this.ns);\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n      };\n\n      exports.names = [\"Equidistant_Conic\", \"eqdc\"];\n    }, {\n      \"../common/adjust_lat\": 4,\n      \"../common/adjust_lon\": 5,\n      \"../common/e0fn\": 7,\n      \"../common/e1fn\": 8,\n      \"../common/e2fn\": 9,\n      \"../common/e3fn\": 10,\n      \"../common/imlfn\": 12,\n      \"../common/mlfn\": 14,\n      \"../common/msfnz\": 15\n    }],\n    46: [function (_dereq_, module, exports) {\n      var FORTPI = Math.PI / 4;\n\n      var srat = _dereq_('../common/srat');\n\n      var HALF_PI = Math.PI / 2;\n      var MAX_ITER = 20;\n\n      exports.init = function () {\n        var sphi = Math.sin(this.lat0);\n        var cphi = Math.cos(this.lat0);\n        cphi *= cphi;\n        this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n        this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n        this.phic0 = Math.asin(sphi / this.C);\n        this.ratexp = 0.5 * this.C * this.e;\n        this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n      };\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n        p.x = this.C * lon;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var DEL_TOL = 1e-14;\n        var lon = p.x / this.C;\n        var lat = p.y;\n        var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n\n        for (var i = MAX_ITER; i > 0; --i) {\n          lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI;\n\n          if (Math.abs(lat - p.y) < DEL_TOL) {\n            break;\n          }\n\n          p.y = lat;\n        }\n        /* convergence failed */\n\n\n        if (!i) {\n          return null;\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"gauss\"];\n    }, {\n      \"../common/srat\": 22\n    }],\n    47: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var EPSLN = 1.0e-10;\n\n      var asinz = _dereq_('../common/asinz');\n      /*\n        reference:\n          Wolfram Mathworld \"Gnomonic Projection\"\n          http://mathworld.wolfram.com/GnomonicProjection.html\n          Accessed: 12th November 2009\n        */\n\n\n      exports.init = function () {\n        /* Place parameters in static storage for common use\n            -------------------------------------------------*/\n        this.sin_p14 = Math.sin(this.lat0);\n        this.cos_p14 = Math.cos(this.lat0); // Approximation for projecting points to the horizon (infinity)\n\n        this.infinity_dist = 1000 * this.a;\n        this.rc = 1;\n      };\n      /* Gnomonic forward equations--mapping lat,long to x,y\n          ---------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var sinphi, cosphi;\n        /* sin and cos value        */\n\n        var dlon;\n        /* delta longitude value      */\n\n        var coslon;\n        /* cos of longitude        */\n\n        var ksp;\n        /* scale factor          */\n\n        var g;\n        var x, y;\n        var lon = p.x;\n        var lat = p.y;\n        /* Forward equations\n            -----------------*/\n\n        dlon = adjust_lon(lon - this.long0);\n        sinphi = Math.sin(lat);\n        cosphi = Math.cos(lat);\n        coslon = Math.cos(dlon);\n        g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n        ksp = 1;\n\n        if (g > 0 || Math.abs(g) <= EPSLN) {\n          x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n          y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n        } else {\n          // Point is in the opposing hemisphere and is unprojectable\n          // We still need to return a reasonable point, so we project \n          // to infinity, on a bearing \n          // equivalent to the northern hemisphere equivalent\n          // This is a reasonable approximation for short shapes and lines that \n          // straddle the horizon.\n          x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n          y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n        }\n\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var rh;\n        /* Rho */\n\n        var sinc, cosc;\n        var c;\n        var lon, lat;\n        /* Inverse equations\n            -----------------*/\n\n        p.x = (p.x - this.x0) / this.a;\n        p.y = (p.y - this.y0) / this.a;\n        p.x /= this.k0;\n        p.y /= this.k0;\n\n        if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {\n          c = Math.atan2(rh, this.rc);\n          sinc = Math.sin(c);\n          cosc = Math.cos(c);\n          lat = asinz(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);\n          lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n          lon = adjust_lon(this.long0 + lon);\n        } else {\n          lat = this.phic0;\n          lon = 0;\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"gnom\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6\n    }],\n    48: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      exports.init = function () {\n        this.a = 6377397.155;\n        this.es = 0.006674372230614;\n        this.e = Math.sqrt(this.es);\n\n        if (!this.lat0) {\n          this.lat0 = 0.863937979737193;\n        }\n\n        if (!this.long0) {\n          this.long0 = 0.7417649320975901 - 0.308341501185665;\n        }\n        /* if scale not set default to 0.9999 */\n\n\n        if (!this.k0) {\n          this.k0 = 0.9999;\n        }\n\n        this.s45 = 0.785398163397448;\n        /* 45 */\n\n        this.s90 = 2 * this.s45;\n        this.fi0 = this.lat0;\n        this.e2 = this.es;\n        this.e = Math.sqrt(this.e2);\n        this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));\n        this.uq = 1.04216856380474;\n        this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n        this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n        this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n        this.k1 = this.k0;\n        this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n        this.s0 = 1.37008346281555;\n        this.n = Math.sin(this.s0);\n        this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n        this.ad = this.s90 - this.uq;\n      };\n      /* ellipsoid */\n\n      /* calculate xy from lat/lon */\n\n      /* Constants, identical to inverse transform function */\n\n\n      exports.forward = function (p) {\n        var gfi, u, deltav, s, d, eps, ro;\n        var lon = p.x;\n        var lat = p.y;\n        var delta_lon = adjust_lon(lon - this.long0);\n        /* Transformation */\n\n        gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);\n        u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n        deltav = -delta_lon * this.alfa;\n        s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n        d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n        eps = this.n * d;\n        ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n        p.y = ro * Math.cos(eps) / 1;\n        p.x = ro * Math.sin(eps) / 1;\n\n        if (!this.czech) {\n          p.y *= -1;\n          p.x *= -1;\n        }\n\n        return p;\n      };\n      /* calculate lat/lon from xy */\n\n\n      exports.inverse = function (p) {\n        var u, deltav, s, d, eps, ro, fi1;\n        var ok;\n        /* Transformation */\n\n        /* revert y, x*/\n\n        var tmp = p.x;\n        p.x = p.y;\n        p.y = tmp;\n\n        if (!this.czech) {\n          p.y *= -1;\n          p.x *= -1;\n        }\n\n        ro = Math.sqrt(p.x * p.x + p.y * p.y);\n        eps = Math.atan2(p.y, p.x);\n        d = eps / Math.sin(this.s0);\n        s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n        u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n        deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n        p.x = this.long0 - deltav / this.alfa;\n        fi1 = u;\n        ok = 0;\n        var iter = 0;\n\n        do {\n          p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n\n          if (Math.abs(fi1 - p.y) < 0.0000000001) {\n            ok = 1;\n          }\n\n          fi1 = p.y;\n          iter += 1;\n        } while (ok === 0 && iter < 15);\n\n        if (iter >= 15) {\n          return null;\n        }\n\n        return p;\n      };\n\n      exports.names = [\"Krovak\", \"krovak\"];\n    }, {\n      \"../common/adjust_lon\": 5\n    }],\n    49: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n      var FORTPI = Math.PI / 4;\n      var EPSLN = 1.0e-10;\n\n      var qsfnz = _dereq_('../common/qsfnz');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n      /*\n        reference\n          \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n          The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n        */\n\n\n      exports.S_POLE = 1;\n      exports.N_POLE = 2;\n      exports.EQUIT = 3;\n      exports.OBLIQ = 4;\n      /* Initialize the Lambert Azimuthal Equal Area projection\n        ------------------------------------------------------*/\n\n      exports.init = function () {\n        var t = Math.abs(this.lat0);\n\n        if (Math.abs(t - HALF_PI) < EPSLN) {\n          this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n        } else if (Math.abs(t) < EPSLN) {\n          this.mode = this.EQUIT;\n        } else {\n          this.mode = this.OBLIQ;\n        }\n\n        if (this.es > 0) {\n          var sinphi;\n          this.qp = qsfnz(this.e, 1);\n          this.mmf = 0.5 / (1 - this.es);\n          this.apa = this.authset(this.es);\n\n          switch (this.mode) {\n            case this.N_POLE:\n              this.dd = 1;\n              break;\n\n            case this.S_POLE:\n              this.dd = 1;\n              break;\n\n            case this.EQUIT:\n              this.rq = Math.sqrt(0.5 * this.qp);\n              this.dd = 1 / this.rq;\n              this.xmf = 1;\n              this.ymf = 0.5 * this.qp;\n              break;\n\n            case this.OBLIQ:\n              this.rq = Math.sqrt(0.5 * this.qp);\n              sinphi = Math.sin(this.lat0);\n              this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n              this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n              this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n              this.ymf = (this.xmf = this.rq) / this.dd;\n              this.xmf *= this.dd;\n              break;\n          }\n        } else {\n          if (this.mode === this.OBLIQ) {\n            this.sinph0 = Math.sin(this.lat0);\n            this.cosph0 = Math.cos(this.lat0);\n          }\n        }\n      };\n      /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n        -----------------------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        /* Forward equations\n            -----------------*/\n        var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n        var lam = p.x;\n        var phi = p.y;\n        lam = adjust_lon(lam - this.long0);\n\n        if (this.sphere) {\n          sinphi = Math.sin(phi);\n          cosphi = Math.cos(phi);\n          coslam = Math.cos(lam);\n\n          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n            y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n\n            if (y <= EPSLN) {\n              return null;\n            }\n\n            y = Math.sqrt(2 / y);\n            x = y * cosphi * Math.sin(lam);\n            y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n          } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n            if (this.mode === this.N_POLE) {\n              coslam = -coslam;\n            }\n\n            if (Math.abs(phi + this.phi0) < EPSLN) {\n              return null;\n            }\n\n            y = FORTPI - phi * 0.5;\n            y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));\n            x = y * Math.sin(lam);\n            y *= coslam;\n          }\n        } else {\n          sinb = 0;\n          cosb = 0;\n          b = 0;\n          coslam = Math.cos(lam);\n          sinlam = Math.sin(lam);\n          sinphi = Math.sin(phi);\n          q = qsfnz(this.e, sinphi);\n\n          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n            sinb = q / this.qp;\n            cosb = Math.sqrt(1 - sinb * sinb);\n          }\n\n          switch (this.mode) {\n            case this.OBLIQ:\n              b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n              break;\n\n            case this.EQUIT:\n              b = 1 + cosb * coslam;\n              break;\n\n            case this.N_POLE:\n              b = HALF_PI + phi;\n              q = this.qp - q;\n              break;\n\n            case this.S_POLE:\n              b = phi - HALF_PI;\n              q = this.qp + q;\n              break;\n          }\n\n          if (Math.abs(b) < EPSLN) {\n            return null;\n          }\n\n          switch (this.mode) {\n            case this.OBLIQ:\n            case this.EQUIT:\n              b = Math.sqrt(2 / b);\n\n              if (this.mode === this.OBLIQ) {\n                y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n              } else {\n                y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n              }\n\n              x = this.xmf * b * cosb * sinlam;\n              break;\n\n            case this.N_POLE:\n            case this.S_POLE:\n              if (q >= 0) {\n                x = (b = Math.sqrt(q)) * sinlam;\n                y = coslam * (this.mode === this.S_POLE ? b : -b);\n              } else {\n                x = y = 0;\n              }\n\n              break;\n          }\n        }\n\n        p.x = this.a * x + this.x0;\n        p.y = this.a * y + this.y0;\n        return p;\n      };\n      /* Inverse equations\n        -----------------*/\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var x = p.x / this.a;\n        var y = p.y / this.a;\n        var lam, phi, cCe, sCe, q, rho, ab;\n\n        if (this.sphere) {\n          var cosz = 0,\n              rh,\n              sinz = 0;\n          rh = Math.sqrt(x * x + y * y);\n          phi = rh * 0.5;\n\n          if (phi > 1) {\n            return null;\n          }\n\n          phi = 2 * Math.asin(phi);\n\n          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n            sinz = Math.sin(phi);\n            cosz = Math.cos(phi);\n          }\n\n          switch (this.mode) {\n            case this.EQUIT:\n              phi = Math.abs(rh) <= EPSLN ? 0 : Math.asin(y * sinz / rh);\n              x *= sinz;\n              y = cosz * rh;\n              break;\n\n            case this.OBLIQ:\n              phi = Math.abs(rh) <= EPSLN ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n              x *= sinz * this.cosph0;\n              y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n              break;\n\n            case this.N_POLE:\n              y = -y;\n              phi = HALF_PI - phi;\n              break;\n\n            case this.S_POLE:\n              phi -= HALF_PI;\n              break;\n          }\n\n          lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);\n        } else {\n          ab = 0;\n\n          if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n            x /= this.dd;\n            y *= this.dd;\n            rho = Math.sqrt(x * x + y * y);\n\n            if (rho < EPSLN) {\n              p.x = 0;\n              p.y = this.phi0;\n              return p;\n            }\n\n            sCe = 2 * Math.asin(0.5 * rho / this.rq);\n            cCe = Math.cos(sCe);\n            x *= sCe = Math.sin(sCe);\n\n            if (this.mode === this.OBLIQ) {\n              ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n              q = this.qp * ab;\n              y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n            } else {\n              ab = y * sCe / rho;\n              q = this.qp * ab;\n              y = rho * cCe;\n            }\n          } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n            if (this.mode === this.N_POLE) {\n              y = -y;\n            }\n\n            q = x * x + y * y;\n\n            if (!q) {\n              p.x = 0;\n              p.y = this.phi0;\n              return p;\n            }\n\n            ab = 1 - q / this.qp;\n\n            if (this.mode === this.S_POLE) {\n              ab = -ab;\n            }\n          }\n\n          lam = Math.atan2(x, y);\n          phi = this.authlat(Math.asin(ab), this.apa);\n        }\n\n        p.x = adjust_lon(this.long0 + lam);\n        p.y = phi;\n        return p;\n      };\n      /* determine latitude from authalic latitude */\n\n\n      exports.P00 = 0.33333333333333333333;\n      exports.P01 = 0.17222222222222222222;\n      exports.P02 = 0.10257936507936507936;\n      exports.P10 = 0.06388888888888888888;\n      exports.P11 = 0.06640211640211640211;\n      exports.P20 = 0.01641501294219154443;\n\n      exports.authset = function (es) {\n        var t;\n        var APA = [];\n        APA[0] = es * this.P00;\n        t = es * es;\n        APA[0] += t * this.P01;\n        APA[1] = t * this.P10;\n        t *= es;\n        APA[0] += t * this.P02;\n        APA[1] += t * this.P11;\n        APA[2] = t * this.P20;\n        return APA;\n      };\n\n      exports.authlat = function (beta, APA) {\n        var t = beta + beta;\n        return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);\n      };\n\n      exports.names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/qsfnz\": 20\n    }],\n    50: [function (_dereq_, module, exports) {\n      var EPSLN = 1.0e-10;\n\n      var msfnz = _dereq_('../common/msfnz');\n\n      var tsfnz = _dereq_('../common/tsfnz');\n\n      var HALF_PI = Math.PI / 2;\n\n      var sign = _dereq_('../common/sign');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var phi2z = _dereq_('../common/phi2z');\n\n      exports.init = function () {\n        // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n        //double c_lat;                   /* center latitude                      */\n        //double c_lon;                   /* center longitude                     */\n        //double lat1;                    /* first standard parallel              */\n        //double lat2;                    /* second standard parallel             */\n        //double r_maj;                   /* major axis                           */\n        //double r_min;                   /* minor axis                           */\n        //double false_east;              /* x offset in meters                   */\n        //double false_north;             /* y offset in meters                   */\n        if (!this.lat2) {\n          this.lat2 = this.lat1;\n        } //if lat2 is not defined\n\n\n        if (!this.k0) {\n          this.k0 = 1;\n        }\n\n        this.x0 = this.x0 || 0;\n        this.y0 = this.y0 || 0; // Standard Parallels cannot be equal and on opposite sides of the equator\n\n        if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n          return;\n        }\n\n        var temp = this.b / this.a;\n        this.e = Math.sqrt(1 - temp * temp);\n        var sin1 = Math.sin(this.lat1);\n        var cos1 = Math.cos(this.lat1);\n        var ms1 = msfnz(this.e, sin1, cos1);\n        var ts1 = tsfnz(this.e, this.lat1, sin1);\n        var sin2 = Math.sin(this.lat2);\n        var cos2 = Math.cos(this.lat2);\n        var ms2 = msfnz(this.e, sin2, cos2);\n        var ts2 = tsfnz(this.e, this.lat2, sin2);\n        var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n        if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n          this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n        } else {\n          this.ns = sin1;\n        }\n\n        if (isNaN(this.ns)) {\n          this.ns = sin1;\n        }\n\n        this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n        this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n\n        if (!this.title) {\n          this.title = \"Lambert Conformal Conic\";\n        }\n      }; // Lambert Conformal conic forward equations--mapping lat,long to x,y\n      // -----------------------------------------------------------------\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y; // singular cases :\n\n        if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n          lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n        }\n\n        var con = Math.abs(Math.abs(lat) - HALF_PI);\n        var ts, rh1;\n\n        if (con > EPSLN) {\n          ts = tsfnz(this.e, lat, Math.sin(lat));\n          rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n        } else {\n          con = lat * this.ns;\n\n          if (con <= 0) {\n            return null;\n          }\n\n          rh1 = 0;\n        }\n\n        var theta = this.ns * adjust_lon(lon - this.long0);\n        p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n        p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n        return p;\n      }; // Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n      // -----------------------------------------------------------------\n\n\n      exports.inverse = function (p) {\n        var rh1, con, ts;\n        var lat, lon;\n        var x = (p.x - this.x0) / this.k0;\n        var y = this.rh - (p.y - this.y0) / this.k0;\n\n        if (this.ns > 0) {\n          rh1 = Math.sqrt(x * x + y * y);\n          con = 1;\n        } else {\n          rh1 = -Math.sqrt(x * x + y * y);\n          con = -1;\n        }\n\n        var theta = 0;\n\n        if (rh1 !== 0) {\n          theta = Math.atan2(con * x, con * y);\n        }\n\n        if (rh1 !== 0 || this.ns > 0) {\n          con = 1 / this.ns;\n          ts = Math.pow(rh1 / (this.a * this.f0), con);\n          lat = phi2z(this.e, ts);\n\n          if (lat === -9999) {\n            return null;\n          }\n        } else {\n          lat = -HALF_PI;\n        }\n\n        lon = adjust_lon(theta / this.ns + this.long0);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/msfnz\": 15,\n      \"../common/phi2z\": 16,\n      \"../common/sign\": 21,\n      \"../common/tsfnz\": 24\n    }],\n    51: [function (_dereq_, module, exports) {\n      exports.init = function () {//no-op for longlat\n      };\n\n      function identity(pt) {\n        return pt;\n      }\n\n      exports.forward = identity;\n      exports.inverse = identity;\n      exports.names = [\"longlat\", \"identity\"];\n    }, {}],\n    52: [function (_dereq_, module, exports) {\n      var msfnz = _dereq_('../common/msfnz');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n      var R2D = 57.29577951308232088;\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var FORTPI = Math.PI / 4;\n\n      var tsfnz = _dereq_('../common/tsfnz');\n\n      var phi2z = _dereq_('../common/phi2z');\n\n      exports.init = function () {\n        var con = this.b / this.a;\n        this.es = 1 - con * con;\n\n        if (!('x0' in this)) {\n          this.x0 = 0;\n        }\n\n        if (!('y0' in this)) {\n          this.y0 = 0;\n        }\n\n        this.e = Math.sqrt(this.es);\n\n        if (this.lat_ts) {\n          if (this.sphere) {\n            this.k0 = Math.cos(this.lat_ts);\n          } else {\n            this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n          }\n        } else {\n          if (!this.k0) {\n            if (this.k) {\n              this.k0 = this.k;\n            } else {\n              this.k0 = 1;\n            }\n          }\n        }\n      };\n      /* Mercator forward equations--mapping lat,long to x,y\n        --------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y; // convert to radians\n\n        if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n          return null;\n        }\n\n        var x, y;\n\n        if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n          return null;\n        } else {\n          if (this.sphere) {\n            x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n            y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n          } else {\n            var sinphi = Math.sin(lat);\n            var ts = tsfnz(this.e, lat, sinphi);\n            x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n            y = this.y0 - this.a * this.k0 * Math.log(ts);\n          }\n\n          p.x = x;\n          p.y = y;\n          return p;\n        }\n      };\n      /* Mercator inverse equations--mapping x,y to lat/long\n        --------------------------------------------------*/\n\n\n      exports.inverse = function (p) {\n        var x = p.x - this.x0;\n        var y = p.y - this.y0;\n        var lon, lat;\n\n        if (this.sphere) {\n          lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n        } else {\n          var ts = Math.exp(-y / (this.a * this.k0));\n          lat = phi2z(this.e, ts);\n\n          if (lat === -9999) {\n            return null;\n          }\n        }\n\n        lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/msfnz\": 15,\n      \"../common/phi2z\": 16,\n      \"../common/tsfnz\": 24\n    }],\n    53: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n      /*\n        reference\n          \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n          The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n        */\n\n      /* Initialize the Miller Cylindrical projection\n        -------------------------------------------*/\n\n\n      exports.init = function () {//no-op\n      };\n      /* Miller Cylindrical forward equations--mapping lat,long to x,y\n          ------------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        /* Forward equations\n            -----------------*/\n\n        var dlon = adjust_lon(lon - this.long0);\n        var x = this.x0 + this.a * dlon;\n        var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n      /* Miller Cylindrical inverse equations--mapping x,y to lat/long\n          ------------------------------------------------------------*/\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var lon = adjust_lon(this.long0 + p.x / this.a);\n        var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Miller_Cylindrical\", \"mill\"];\n    }, {\n      \"../common/adjust_lon\": 5\n    }],\n    54: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var EPSLN = 1.0e-10;\n\n      exports.init = function () {};\n      /* Mollweide forward equations--mapping lat,long to x,y\n          ----------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        /* Forward equations\n            -----------------*/\n        var lon = p.x;\n        var lat = p.y;\n        var delta_lon = adjust_lon(lon - this.long0);\n        var theta = lat;\n        var con = Math.PI * Math.sin(lat);\n        /* Iterate using the Newton-Raphson method to find theta\n            -----------------------------------------------------*/\n\n        for (var i = 0; true; i++) {\n          var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n          theta += delta_theta;\n\n          if (Math.abs(delta_theta) < EPSLN) {\n            break;\n          }\n        }\n\n        theta /= 2;\n        /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n             this is done here because of precision problems with \"cos(theta)\"\n             --------------------------------------------------------------------------*/\n\n        if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n          delta_lon = 0;\n        }\n\n        var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n        var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var theta;\n        var arg;\n        /* Inverse equations\n            -----------------*/\n\n        p.x -= this.x0;\n        p.y -= this.y0;\n        arg = p.y / (1.4142135623731 * this.a);\n        /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n             a number very close to one is used instead.\n             -------------------------------------------------------------------*/\n\n        if (Math.abs(arg) > 0.999999999999) {\n          arg = 0.999999999999;\n        }\n\n        theta = Math.asin(arg);\n        var lon = adjust_lon(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));\n\n        if (lon < -Math.PI) {\n          lon = -Math.PI;\n        }\n\n        if (lon > Math.PI) {\n          lon = Math.PI;\n        }\n\n        arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n\n        if (Math.abs(arg) > 1) {\n          arg = 1;\n        }\n\n        var lat = Math.asin(arg);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Mollweide\", \"moll\"];\n    }, {\n      \"../common/adjust_lon\": 5\n    }],\n    55: [function (_dereq_, module, exports) {\n      var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n      /*\n        reference\n          Department of Land and Survey Technical Circular 1973/32\n            http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n          OSG Technical Report 4.1\n            http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n        */\n\n      /**\n       * iterations: Number of iterations to refine inverse transform.\n       *     0 -> km accuracy\n       *     1 -> m accuracy -- suitable for most mapping applications\n       *     2 -> mm accuracy\n       */\n\n      exports.iterations = 1;\n\n      exports.init = function () {\n        this.A = [];\n        this.A[1] = 0.6399175073;\n        this.A[2] = -0.1358797613;\n        this.A[3] = 0.063294409;\n        this.A[4] = -0.02526853;\n        this.A[5] = 0.0117879;\n        this.A[6] = -0.0055161;\n        this.A[7] = 0.0026906;\n        this.A[8] = -0.001333;\n        this.A[9] = 0.00067;\n        this.A[10] = -0.00034;\n        this.B_re = [];\n        this.B_im = [];\n        this.B_re[1] = 0.7557853228;\n        this.B_im[1] = 0;\n        this.B_re[2] = 0.249204646;\n        this.B_im[2] = 0.003371507;\n        this.B_re[3] = -0.001541739;\n        this.B_im[3] = 0.041058560;\n        this.B_re[4] = -0.10162907;\n        this.B_im[4] = 0.01727609;\n        this.B_re[5] = -0.26623489;\n        this.B_im[5] = -0.36249218;\n        this.B_re[6] = -0.6870983;\n        this.B_im[6] = -1.1651967;\n        this.C_re = [];\n        this.C_im = [];\n        this.C_re[1] = 1.3231270439;\n        this.C_im[1] = 0;\n        this.C_re[2] = -0.577245789;\n        this.C_im[2] = -0.007809598;\n        this.C_re[3] = 0.508307513;\n        this.C_im[3] = -0.112208952;\n        this.C_re[4] = -0.15094762;\n        this.C_im[4] = 0.18200602;\n        this.C_re[5] = 1.01418179;\n        this.C_im[5] = 1.64497696;\n        this.C_re[6] = 1.9660549;\n        this.C_im[6] = 2.5127645;\n        this.D = [];\n        this.D[1] = 1.5627014243;\n        this.D[2] = 0.5185406398;\n        this.D[3] = -0.03333098;\n        this.D[4] = -0.1052906;\n        this.D[5] = -0.0368594;\n        this.D[6] = 0.007317;\n        this.D[7] = 0.01220;\n        this.D[8] = 0.00394;\n        this.D[9] = -0.0013;\n      };\n      /**\n          New Zealand Map Grid Forward  - long/lat to x/y\n          long/lat in radians\n        */\n\n\n      exports.forward = function (p) {\n        var n;\n        var lon = p.x;\n        var lat = p.y;\n        var delta_lat = lat - this.lat0;\n        var delta_lon = lon - this.long0; // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n        // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n\n        var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n        var d_lambda = delta_lon;\n        var d_phi_n = 1; // d_phi^0\n\n        var d_psi = 0;\n\n        for (n = 1; n <= 10; n++) {\n          d_phi_n = d_phi_n * d_phi;\n          d_psi = d_psi + this.A[n] * d_phi_n;\n        } // 2. Calculate theta\n\n\n        var th_re = d_psi;\n        var th_im = d_lambda; // 3. Calculate z\n\n        var th_n_re = 1;\n        var th_n_im = 0; // theta^0\n\n        var th_n_re1;\n        var th_n_im1;\n        var z_re = 0;\n        var z_im = 0;\n\n        for (n = 1; n <= 6; n++) {\n          th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n          th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n          th_n_re = th_n_re1;\n          th_n_im = th_n_im1;\n          z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n          z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n        } // 4. Calculate easting and northing\n\n\n        p.x = z_im * this.a + this.x0;\n        p.y = z_re * this.a + this.y0;\n        return p;\n      };\n      /**\n          New Zealand Map Grid Inverse  -  x/y to long/lat\n        */\n\n\n      exports.inverse = function (p) {\n        var n;\n        var x = p.x;\n        var y = p.y;\n        var delta_x = x - this.x0;\n        var delta_y = y - this.y0; // 1. Calculate z\n\n        var z_re = delta_y / this.a;\n        var z_im = delta_x / this.a; // 2a. Calculate theta - first approximation gives km accuracy\n\n        var z_n_re = 1;\n        var z_n_im = 0; // z^0\n\n        var z_n_re1;\n        var z_n_im1;\n        var th_re = 0;\n        var th_im = 0;\n\n        for (n = 1; n <= 6; n++) {\n          z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n          z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n          z_n_re = z_n_re1;\n          z_n_im = z_n_im1;\n          th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n          th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n        } // 2b. Iterate to refine the accuracy of the calculation\n        //        0 iterations gives km accuracy\n        //        1 iteration gives m accuracy -- good enough for most mapping applications\n        //        2 iterations bives mm accuracy\n\n\n        for (var i = 0; i < this.iterations; i++) {\n          var th_n_re = th_re;\n          var th_n_im = th_im;\n          var th_n_re1;\n          var th_n_im1;\n          var num_re = z_re;\n          var num_im = z_im;\n\n          for (n = 2; n <= 6; n++) {\n            th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n            th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n            th_n_re = th_n_re1;\n            th_n_im = th_n_im1;\n            num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n            num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n          }\n\n          th_n_re = 1;\n          th_n_im = 0;\n          var den_re = this.B_re[1];\n          var den_im = this.B_im[1];\n\n          for (n = 2; n <= 6; n++) {\n            th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n            th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n            th_n_re = th_n_re1;\n            th_n_im = th_n_im1;\n            den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n            den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n          } // Complex division\n\n\n          var den2 = den_re * den_re + den_im * den_im;\n          th_re = (num_re * den_re + num_im * den_im) / den2;\n          th_im = (num_im * den_re - num_re * den_im) / den2;\n        } // 3. Calculate d_phi              ...                                    // and d_lambda\n\n\n        var d_psi = th_re;\n        var d_lambda = th_im;\n        var d_psi_n = 1; // d_psi^0\n\n        var d_phi = 0;\n\n        for (n = 1; n <= 9; n++) {\n          d_psi_n = d_psi_n * d_psi;\n          d_phi = d_phi + this.D[n] * d_psi_n;\n        } // 4. Calculate latitude and longitude\n        // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n\n\n        var lat = this.lat0 + d_phi * SEC_TO_RAD * 1E5;\n        var lon = this.long0 + d_lambda;\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\n    }, {}],\n    56: [function (_dereq_, module, exports) {\n      var tsfnz = _dereq_('../common/tsfnz');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var phi2z = _dereq_('../common/phi2z');\n\n      var HALF_PI = Math.PI / 2;\n      var FORTPI = Math.PI / 4;\n      var EPSLN = 1.0e-10;\n      /* Initialize the Oblique Mercator  projection\n          ------------------------------------------*/\n\n      exports.init = function () {\n        this.no_off = this.no_off || false;\n        this.no_rot = this.no_rot || false;\n\n        if (isNaN(this.k0)) {\n          this.k0 = 1;\n        }\n\n        var sinlat = Math.sin(this.lat0);\n        var coslat = Math.cos(this.lat0);\n        var con = this.e * sinlat;\n        this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n        this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n        var t0 = tsfnz(this.e, this.lat0, sinlat);\n        var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n\n        if (dl * dl < 1) {\n          dl = 1;\n        }\n\n        var fl;\n        var gl;\n\n        if (!isNaN(this.longc)) {\n          //Central point and azimuth method\n          if (this.lat0 >= 0) {\n            fl = dl + Math.sqrt(dl * dl - 1);\n          } else {\n            fl = dl - Math.sqrt(dl * dl - 1);\n          }\n\n          this.el = fl * Math.pow(t0, this.bl);\n          gl = 0.5 * (fl - 1 / fl);\n          this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n          this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n        } else {\n          //2 points method\n          var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n          var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n\n          if (this.lat0 >= 0) {\n            this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n          } else {\n            this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n          }\n\n          var hl = Math.pow(t1, this.bl);\n          var ll = Math.pow(t2, this.bl);\n          fl = this.el / hl;\n          gl = 0.5 * (fl - 1 / fl);\n          var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n          var pl = (ll - hl) / (ll + hl);\n          var dlon12 = adjust_lon(this.long1 - this.long2);\n          this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * dlon12) / pl) / this.bl;\n          this.long0 = adjust_lon(this.long0);\n          var dlon10 = adjust_lon(this.long1 - this.long0);\n          this.gamma0 = Math.atan(Math.sin(this.bl * dlon10) / gl);\n          this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n        }\n\n        if (this.no_off) {\n          this.uc = 0;\n        } else {\n          if (this.lat0 >= 0) {\n            this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n          } else {\n            this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n          }\n        }\n      };\n      /* Oblique Mercator forward equations--mapping lat,long to x,y\n          ----------------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var dlon = adjust_lon(lon - this.long0);\n        var us, vs;\n        var con;\n\n        if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n          if (lat > 0) {\n            con = -1;\n          } else {\n            con = 1;\n          }\n\n          vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n          us = -1 * con * HALF_PI * this.al / this.bl;\n        } else {\n          var t = tsfnz(this.e, lat, Math.sin(lat));\n          var ql = this.el / Math.pow(t, this.bl);\n          var sl = 0.5 * (ql - 1 / ql);\n          var tl = 0.5 * (ql + 1 / ql);\n          var vl = Math.sin(this.bl * dlon);\n          var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n\n          if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n            vs = Number.POSITIVE_INFINITY;\n          } else {\n            vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n          }\n\n          if (Math.abs(Math.cos(this.bl * dlon)) <= EPSLN) {\n            us = this.al * this.bl * dlon;\n          } else {\n            us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n          }\n        }\n\n        if (this.no_rot) {\n          p.x = this.x0 + us;\n          p.y = this.y0 + vs;\n        } else {\n          us -= this.uc;\n          p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n          p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n        }\n\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var us, vs;\n\n        if (this.no_rot) {\n          vs = p.y - this.y0;\n          us = p.x - this.x0;\n        } else {\n          vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n          us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n          us += this.uc;\n        }\n\n        var qp = Math.exp(-1 * this.bl * vs / this.al);\n        var sp = 0.5 * (qp - 1 / qp);\n        var tp = 0.5 * (qp + 1 / qp);\n        var vp = Math.sin(this.bl * us / this.al);\n        var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n        var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n\n        if (Math.abs(up - 1) < EPSLN) {\n          p.x = this.long0;\n          p.y = HALF_PI;\n        } else if (Math.abs(up + 1) < EPSLN) {\n          p.x = this.long0;\n          p.y = -1 * HALF_PI;\n        } else {\n          p.y = phi2z(this.e, ts);\n          p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n        }\n\n        return p;\n      };\n\n      exports.names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/phi2z\": 16,\n      \"../common/tsfnz\": 24\n    }],\n    57: [function (_dereq_, module, exports) {\n      var e0fn = _dereq_('../common/e0fn');\n\n      var e1fn = _dereq_('../common/e1fn');\n\n      var e2fn = _dereq_('../common/e2fn');\n\n      var e3fn = _dereq_('../common/e3fn');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var adjust_lat = _dereq_('../common/adjust_lat');\n\n      var mlfn = _dereq_('../common/mlfn');\n\n      var EPSLN = 1.0e-10;\n\n      var gN = _dereq_('../common/gN');\n\n      var MAX_ITER = 20;\n\n      exports.init = function () {\n        /* Place parameters in static storage for common use\n            -------------------------------------------------*/\n        this.temp = this.b / this.a;\n        this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n\n        this.e = Math.sqrt(this.es);\n        this.e0 = e0fn(this.es);\n        this.e1 = e1fn(this.es);\n        this.e2 = e2fn(this.es);\n        this.e3 = e3fn(this.es);\n        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n      };\n      /* Polyconic forward equations--mapping lat,long to x,y\n          ---------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var x, y, el;\n        var dlon = adjust_lon(lon - this.long0);\n        el = dlon * Math.sin(lat);\n\n        if (this.sphere) {\n          if (Math.abs(lat) <= EPSLN) {\n            x = this.a * dlon;\n            y = -1 * this.a * this.lat0;\n          } else {\n            x = this.a * Math.sin(el) / Math.tan(lat);\n            y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n          }\n        } else {\n          if (Math.abs(lat) <= EPSLN) {\n            x = this.a * dlon;\n            y = -1 * this.ml0;\n          } else {\n            var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n            x = nl * Math.sin(el);\n            y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n          }\n        }\n\n        p.x = x + this.x0;\n        p.y = y + this.y0;\n        return p;\n      };\n      /* Inverse equations\n        -----------------*/\n\n\n      exports.inverse = function (p) {\n        var lon, lat, x, y, i;\n        var al, bl;\n        var phi, dphi;\n        x = p.x - this.x0;\n        y = p.y - this.y0;\n\n        if (this.sphere) {\n          if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n            lon = adjust_lon(x / this.a + this.long0);\n            lat = 0;\n          } else {\n            al = this.lat0 + y / this.a;\n            bl = x * x / this.a / this.a + al * al;\n            phi = al;\n            var tanphi;\n\n            for (i = MAX_ITER; i; --i) {\n              tanphi = Math.tan(phi);\n              dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n              phi += dphi;\n\n              if (Math.abs(dphi) <= EPSLN) {\n                lat = phi;\n                break;\n              }\n            }\n\n            lon = adjust_lon(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));\n          }\n        } else {\n          if (Math.abs(y + this.ml0) <= EPSLN) {\n            lat = 0;\n            lon = adjust_lon(this.long0 + x / this.a);\n          } else {\n            al = (this.ml0 + y) / this.a;\n            bl = x * x / this.a / this.a + al * al;\n            phi = al;\n            var cl, mln, mlnp, ma;\n            var con;\n\n            for (i = MAX_ITER; i; --i) {\n              con = this.e * Math.sin(phi);\n              cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n              mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n              mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n              ma = mln / this.a;\n              dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n              phi -= dphi;\n\n              if (Math.abs(dphi) <= EPSLN) {\n                lat = phi;\n                break;\n              }\n            } //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n\n\n            cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n            lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n          }\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Polyconic\", \"poly\"];\n    }, {\n      \"../common/adjust_lat\": 4,\n      \"../common/adjust_lon\": 5,\n      \"../common/e0fn\": 7,\n      \"../common/e1fn\": 8,\n      \"../common/e2fn\": 9,\n      \"../common/e3fn\": 10,\n      \"../common/gN\": 11,\n      \"../common/mlfn\": 14\n    }],\n    58: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var adjust_lat = _dereq_('../common/adjust_lat');\n\n      var pj_enfn = _dereq_('../common/pj_enfn');\n\n      var MAX_ITER = 20;\n\n      var pj_mlfn = _dereq_('../common/pj_mlfn');\n\n      var pj_inv_mlfn = _dereq_('../common/pj_inv_mlfn');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      var asinz = _dereq_('../common/asinz');\n\n      exports.init = function () {\n        /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n        if (!this.sphere) {\n          this.en = pj_enfn(this.es);\n        } else {\n          this.n = 1;\n          this.m = 0;\n          this.es = 0;\n          this.C_y = Math.sqrt((this.m + 1) / this.n);\n          this.C_x = this.C_y / (this.m + 1);\n        }\n      };\n      /* Sinusoidal forward equations--mapping lat,long to x,y\n        -----------------------------------------------------*/\n\n\n      exports.forward = function (p) {\n        var x, y;\n        var lon = p.x;\n        var lat = p.y;\n        /* Forward equations\n          -----------------*/\n\n        lon = adjust_lon(lon - this.long0);\n\n        if (this.sphere) {\n          if (!this.m) {\n            lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n          } else {\n            var k = this.n * Math.sin(lat);\n\n            for (var i = MAX_ITER; i; --i) {\n              var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n              lat -= V;\n\n              if (Math.abs(V) < EPSLN) {\n                break;\n              }\n            }\n          }\n\n          x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n          y = this.a * this.C_y * lat;\n        } else {\n          var s = Math.sin(lat);\n          var c = Math.cos(lat);\n          y = this.a * pj_mlfn(lat, s, c, this.en);\n          x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n        }\n\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var lat, temp, lon, s;\n        p.x -= this.x0;\n        lon = p.x / this.a;\n        p.y -= this.y0;\n        lat = p.y / this.a;\n\n        if (this.sphere) {\n          lat /= this.C_y;\n          lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n\n          if (this.m) {\n            lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n          } else if (this.n !== 1) {\n            lat = asinz(Math.sin(lat) / this.n);\n          }\n\n          lon = adjust_lon(lon + this.long0);\n          lat = adjust_lat(lat);\n        } else {\n          lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n          s = Math.abs(lat);\n\n          if (s < HALF_PI) {\n            s = Math.sin(lat);\n            temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat)); //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n\n            lon = adjust_lon(temp);\n          } else if (s - EPSLN < HALF_PI) {\n            lon = this.long0;\n          }\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Sinusoidal\", \"sinu\"];\n    }, {\n      \"../common/adjust_lat\": 4,\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6,\n      \"../common/pj_enfn\": 17,\n      \"../common/pj_inv_mlfn\": 18,\n      \"../common/pj_mlfn\": 19\n    }],\n    59: [function (_dereq_, module, exports) {\n      /*\n        references:\n          Formules et constantes pour le Calcul pour la\n          projection cylindrique conforme à axe oblique et pour la transformation entre\n          des systèmes de référence.\n          http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n        */\n      exports.init = function () {\n        var phy0 = this.lat0;\n        this.lambda0 = this.long0;\n        var sinPhy0 = Math.sin(phy0);\n        var semiMajorAxis = this.a;\n        var invF = this.rf;\n        var flattening = 1 / invF;\n        var e2 = 2 * flattening - Math.pow(flattening, 2);\n        var e = this.e = Math.sqrt(e2);\n        this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n        this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n        this.b0 = Math.asin(sinPhy0 / this.alpha);\n        var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n        var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n        var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n        this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n      };\n\n      exports.forward = function (p) {\n        var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n        var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n        var S = -this.alpha * (Sa1 + Sa2) + this.K; // spheric latitude\n\n        var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4); // spheric longitude\n\n        var I = this.alpha * (p.x - this.lambda0); // psoeudo equatorial rotation\n\n        var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n        var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n        p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n        p.x = this.R * rotI + this.x0;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var Y = p.x - this.x0;\n        var X = p.y - this.y0;\n        var rotI = Y / this.R;\n        var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n        var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n        var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n        var lambda = this.lambda0 + I / this.alpha;\n        var S = 0;\n        var phy = b;\n        var prevPhy = -1000;\n        var iteration = 0;\n\n        while (Math.abs(phy - prevPhy) > 0.0000001) {\n          if (++iteration > 20) {\n            //...reportError(\"omercFwdInfinity\");\n            return;\n          } //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n\n\n          S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n          prevPhy = phy;\n          phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n        }\n\n        p.x = lambda;\n        p.y = phy;\n        return p;\n      };\n\n      exports.names = [\"somerc\"];\n    }, {}],\n    60: [function (_dereq_, module, exports) {\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      var sign = _dereq_('../common/sign');\n\n      var msfnz = _dereq_('../common/msfnz');\n\n      var tsfnz = _dereq_('../common/tsfnz');\n\n      var phi2z = _dereq_('../common/phi2z');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      exports.ssfn_ = function (phit, sinphi, eccen) {\n        sinphi *= eccen;\n        return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);\n      };\n\n      exports.init = function () {\n        this.coslat0 = Math.cos(this.lat0);\n        this.sinlat0 = Math.sin(this.lat0);\n\n        if (this.sphere) {\n          if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n            this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n          }\n        } else {\n          if (Math.abs(this.coslat0) <= EPSLN) {\n            if (this.lat0 > 0) {\n              //North pole\n              //trace('stere:north pole');\n              this.con = 1;\n            } else {\n              //South pole\n              //trace('stere:south pole');\n              this.con = -1;\n            }\n          }\n\n          this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n\n          if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n            this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n          }\n\n          this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n          this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n          this.cosX0 = Math.cos(this.X0);\n          this.sinX0 = Math.sin(this.X0);\n        }\n      }; // Stereographic forward equations--mapping lat,long to x,y\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var sinlat = Math.sin(lat);\n        var coslat = Math.cos(lat);\n        var A, X, sinX, cosX, ts, rh;\n        var dlon = adjust_lon(lon - this.long0);\n\n        if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n          //case of the origine point\n          //trace('stere:this is the origin point');\n          p.x = NaN;\n          p.y = NaN;\n          return p;\n        }\n\n        if (this.sphere) {\n          //trace('stere:sphere case');\n          A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n          p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n          p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n          return p;\n        } else {\n          X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n          cosX = Math.cos(X);\n          sinX = Math.sin(X);\n\n          if (Math.abs(this.coslat0) <= EPSLN) {\n            ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n            rh = 2 * this.a * this.k0 * ts / this.cons;\n            p.x = this.x0 + rh * Math.sin(lon - this.long0);\n            p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0); //trace(p.toString());\n\n            return p;\n          } else if (Math.abs(this.sinlat0) < EPSLN) {\n            //Eq\n            //trace('stere:equateur');\n            A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n            p.y = A * sinX;\n          } else {\n            //other case\n            //trace('stere:normal case');\n            A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n            p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n          }\n\n          p.x = A * cosX * Math.sin(dlon) + this.x0;\n        } //trace(p.toString());\n\n\n        return p;\n      }; //* Stereographic inverse equations--mapping x,y to lat/long\n\n\n      exports.inverse = function (p) {\n        p.x -= this.x0;\n        p.y -= this.y0;\n        var lon, lat, ts, ce, Chi;\n        var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\n        if (this.sphere) {\n          var c = 2 * Math.atan(rh / (0.5 * this.a * this.k0));\n          lon = this.long0;\n          lat = this.lat0;\n\n          if (rh <= EPSLN) {\n            p.x = lon;\n            p.y = lat;\n            return p;\n          }\n\n          lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n\n          if (Math.abs(this.coslat0) < EPSLN) {\n            if (this.lat0 > 0) {\n              lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n            } else {\n              lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n            }\n          } else {\n            lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n          }\n\n          p.x = lon;\n          p.y = lat;\n          return p;\n        } else {\n          if (Math.abs(this.coslat0) <= EPSLN) {\n            if (rh <= EPSLN) {\n              lat = this.lat0;\n              lon = this.long0;\n              p.x = lon;\n              p.y = lat; //trace(p.toString());\n\n              return p;\n            }\n\n            p.x *= this.con;\n            p.y *= this.con;\n            ts = rh * this.cons / (2 * this.a * this.k0);\n            lat = this.con * phi2z(this.e, ts);\n            lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));\n          } else {\n            ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n            lon = this.long0;\n\n            if (rh <= EPSLN) {\n              Chi = this.X0;\n            } else {\n              Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n              lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n            }\n\n            lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n          }\n        }\n\n        p.x = lon;\n        p.y = lat; //trace(p.toString());\n\n        return p;\n      };\n\n      exports.names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/msfnz\": 15,\n      \"../common/phi2z\": 16,\n      \"../common/sign\": 21,\n      \"../common/tsfnz\": 24\n    }],\n    61: [function (_dereq_, module, exports) {\n      var gauss = _dereq_('./gauss');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      exports.init = function () {\n        gauss.init.apply(this);\n\n        if (!this.rc) {\n          return;\n        }\n\n        this.sinc0 = Math.sin(this.phic0);\n        this.cosc0 = Math.cos(this.phic0);\n        this.R2 = 2 * this.rc;\n\n        if (!this.title) {\n          this.title = \"Oblique Stereographic Alternative\";\n        }\n      };\n\n      exports.forward = function (p) {\n        var sinc, cosc, cosl, k;\n        p.x = adjust_lon(p.x - this.long0);\n        gauss.forward.apply(this, [p]);\n        sinc = Math.sin(p.y);\n        cosc = Math.cos(p.y);\n        cosl = Math.cos(p.x);\n        k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n        p.x = k * cosc * Math.sin(p.x);\n        p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n        p.x = this.a * p.x + this.x0;\n        p.y = this.a * p.y + this.y0;\n        return p;\n      };\n\n      exports.inverse = function (p) {\n        var sinc, cosc, lon, lat, rho;\n        p.x = (p.x - this.x0) / this.a;\n        p.y = (p.y - this.y0) / this.a;\n        p.x /= this.k0;\n        p.y /= this.k0;\n\n        if (rho = Math.sqrt(p.x * p.x + p.y * p.y)) {\n          var c = 2 * Math.atan2(rho, this.R2);\n          sinc = Math.sin(c);\n          cosc = Math.cos(c);\n          lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n          lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n        } else {\n          lat = this.phic0;\n          lon = 0;\n        }\n\n        p.x = lon;\n        p.y = lat;\n        gauss.inverse.apply(this, [p]);\n        p.x = adjust_lon(p.x + this.long0);\n        return p;\n      };\n\n      exports.names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\", \"Oblique Stereographic Alternative\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"./gauss\": 46\n    }],\n    62: [function (_dereq_, module, exports) {\n      var e0fn = _dereq_('../common/e0fn');\n\n      var e1fn = _dereq_('../common/e1fn');\n\n      var e2fn = _dereq_('../common/e2fn');\n\n      var e3fn = _dereq_('../common/e3fn');\n\n      var mlfn = _dereq_('../common/mlfn');\n\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      var sign = _dereq_('../common/sign');\n\n      var asinz = _dereq_('../common/asinz');\n\n      exports.init = function () {\n        this.e0 = e0fn(this.es);\n        this.e1 = e1fn(this.es);\n        this.e2 = e2fn(this.es);\n        this.e3 = e3fn(this.es);\n        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n      };\n      /**\n          Transverse Mercator Forward  - long/lat to x/y\n          long/lat in radians\n        */\n\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        var delta_lon = adjust_lon(lon - this.long0);\n        var con;\n        var x, y;\n        var sin_phi = Math.sin(lat);\n        var cos_phi = Math.cos(lat);\n\n        if (this.sphere) {\n          var b = cos_phi * Math.sin(delta_lon);\n\n          if (Math.abs(Math.abs(b) - 1) < 0.0000000001) {\n            return 93;\n          } else {\n            x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b));\n            con = Math.acos(cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - b * b));\n\n            if (lat < 0) {\n              con = -con;\n            }\n\n            y = this.a * this.k0 * (con - this.lat0);\n          }\n        } else {\n          var al = cos_phi * delta_lon;\n          var als = Math.pow(al, 2);\n          var c = this.ep2 * Math.pow(cos_phi, 2);\n          var tq = Math.tan(lat);\n          var t = Math.pow(tq, 2);\n          con = 1 - this.es * Math.pow(sin_phi, 2);\n          var n = this.a / Math.sqrt(con);\n          var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n          x = this.k0 * n * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + Math.pow(t, 2) + 72 * c - 58 * this.ep2))) + this.x0;\n          y = this.k0 * (ml - this.ml0 + n * tq * (als * (0.5 + als / 24 * (5 - t + 9 * c + 4 * Math.pow(c, 2) + als / 30 * (61 - 58 * t + Math.pow(t, 2) + 600 * c - 330 * this.ep2))))) + this.y0;\n        }\n\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n      /**\n          Transverse Mercator Inverse  -  x/y to long/lat\n        */\n\n\n      exports.inverse = function (p) {\n        var con, phi;\n        var delta_phi;\n        var i;\n        var max_iter = 6;\n        var lat, lon;\n\n        if (this.sphere) {\n          var f = Math.exp(p.x / (this.a * this.k0));\n          var g = 0.5 * (f - 1 / f);\n          var temp = this.lat0 + p.y / (this.a * this.k0);\n          var h = Math.cos(temp);\n          con = Math.sqrt((1 - h * h) / (1 + g * g));\n          lat = asinz(con);\n\n          if (temp < 0) {\n            lat = -lat;\n          }\n\n          if (g === 0 && h === 0) {\n            lon = this.long0;\n          } else {\n            lon = adjust_lon(Math.atan2(g, h) + this.long0);\n          }\n        } else {\n          // ellipsoidal form\n          var x = p.x - this.x0;\n          var y = p.y - this.y0;\n          con = (this.ml0 + y / this.k0) / this.a;\n          phi = con;\n\n          for (i = 0; true; i++) {\n            delta_phi = (con + this.e1 * Math.sin(2 * phi) - this.e2 * Math.sin(4 * phi) + this.e3 * Math.sin(6 * phi)) / this.e0 - phi;\n            phi += delta_phi;\n\n            if (Math.abs(delta_phi) <= EPSLN) {\n              break;\n            }\n\n            if (i >= max_iter) {\n              return 95;\n            }\n          } // for()\n\n\n          if (Math.abs(phi) < HALF_PI) {\n            var sin_phi = Math.sin(phi);\n            var cos_phi = Math.cos(phi);\n            var tan_phi = Math.tan(phi);\n            var c = this.ep2 * Math.pow(cos_phi, 2);\n            var cs = Math.pow(c, 2);\n            var t = Math.pow(tan_phi, 2);\n            var ts = Math.pow(t, 2);\n            con = 1 - this.es * Math.pow(sin_phi, 2);\n            var n = this.a / Math.sqrt(con);\n            var r = n * (1 - this.es) / con;\n            var d = x / (n * this.k0);\n            var ds = Math.pow(d, 2);\n            lat = phi - n * tan_phi * ds / r * (0.5 - ds / 24 * (5 + 3 * t + 10 * c - 4 * cs - 9 * this.ep2 - ds / 30 * (61 + 90 * t + 298 * c + 45 * ts - 252 * this.ep2 - 3 * cs)));\n            lon = adjust_lon(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 - 2 * c + 28 * t - 3 * cs + 8 * this.ep2 + 24 * ts))) / cos_phi);\n          } else {\n            lat = HALF_PI * sign(y);\n            lon = this.long0;\n          }\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6,\n      \"../common/e0fn\": 7,\n      \"../common/e1fn\": 8,\n      \"../common/e2fn\": 9,\n      \"../common/e3fn\": 10,\n      \"../common/mlfn\": 14,\n      \"../common/sign\": 21\n    }],\n    63: [function (_dereq_, module, exports) {\n      var D2R = 0.01745329251994329577;\n\n      var tmerc = _dereq_('./tmerc');\n\n      exports.dependsOn = 'tmerc';\n\n      exports.init = function () {\n        if (!this.zone) {\n          return;\n        }\n\n        this.lat0 = 0;\n        this.long0 = (6 * Math.abs(this.zone) - 183) * D2R;\n        this.x0 = 500000;\n        this.y0 = this.utmSouth ? 10000000 : 0;\n        this.k0 = 0.9996;\n        tmerc.init.apply(this);\n        this.forward = tmerc.forward;\n        this.inverse = tmerc.inverse;\n      };\n\n      exports.names = [\"Universal Transverse Mercator System\", \"utm\"];\n    }, {\n      \"./tmerc\": 62\n    }],\n    64: [function (_dereq_, module, exports) {\n      var adjust_lon = _dereq_('../common/adjust_lon');\n\n      var HALF_PI = Math.PI / 2;\n      var EPSLN = 1.0e-10;\n\n      var asinz = _dereq_('../common/asinz');\n      /* Initialize the Van Der Grinten projection\n        ----------------------------------------*/\n\n\n      exports.init = function () {\n        //this.R = 6370997; //Radius of earth\n        this.R = this.a;\n      };\n\n      exports.forward = function (p) {\n        var lon = p.x;\n        var lat = p.y;\n        /* Forward equations\n          -----------------*/\n\n        var dlon = adjust_lon(lon - this.long0);\n        var x, y;\n\n        if (Math.abs(lat) <= EPSLN) {\n          x = this.x0 + this.R * dlon;\n          y = this.y0;\n        }\n\n        var theta = asinz(2 * Math.abs(lat / Math.PI));\n\n        if (Math.abs(dlon) <= EPSLN || Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n          x = this.x0;\n\n          if (lat >= 0) {\n            y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n          } else {\n            y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n          } //  return(OK);\n\n        }\n\n        var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);\n        var asq = al * al;\n        var sinth = Math.sin(theta);\n        var costh = Math.cos(theta);\n        var g = costh / (sinth + costh - 1);\n        var gsq = g * g;\n        var m = g * (2 / sinth - 1);\n        var msq = m * m;\n        var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n\n        if (dlon < 0) {\n          con = -con;\n        }\n\n        x = this.x0 + con; //con = Math.abs(con / (Math.PI * this.R));\n\n        var q = asq + g;\n        con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n\n        if (lat >= 0) {\n          //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n          y = this.y0 + con;\n        } else {\n          //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n          y = this.y0 - con;\n        }\n\n        p.x = x;\n        p.y = y;\n        return p;\n      };\n      /* Van Der Grinten inverse equations--mapping x,y to lat/long\n        ---------------------------------------------------------*/\n\n\n      exports.inverse = function (p) {\n        var lon, lat;\n        var xx, yy, xys, c1, c2, c3;\n        var a1;\n        var m1;\n        var con;\n        var th1;\n        var d;\n        /* inverse equations\n          -----------------*/\n\n        p.x -= this.x0;\n        p.y -= this.y0;\n        con = Math.PI * this.R;\n        xx = p.x / con;\n        yy = p.y / con;\n        xys = xx * xx + yy * yy;\n        c1 = -Math.abs(yy) * (1 + xys);\n        c2 = c1 - 2 * yy * yy + xx * xx;\n        c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n        d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n        a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n        m1 = 2 * Math.sqrt(-a1 / 3);\n        con = 3 * d / a1 / m1;\n\n        if (Math.abs(con) > 1) {\n          if (con >= 0) {\n            con = 1;\n          } else {\n            con = -1;\n          }\n        }\n\n        th1 = Math.acos(con) / 3;\n\n        if (p.y >= 0) {\n          lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n        } else {\n          lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n        }\n\n        if (Math.abs(xx) < EPSLN) {\n          lon = this.long0;\n        } else {\n          lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      };\n\n      exports.names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\n    }, {\n      \"../common/adjust_lon\": 5,\n      \"../common/asinz\": 6\n    }],\n    65: [function (_dereq_, module, exports) {\n      var D2R = 0.01745329251994329577;\n      var R2D = 57.29577951308232088;\n      var PJD_3PARAM = 1;\n      var PJD_7PARAM = 2;\n\n      var datum_transform = _dereq_('./datum_transform');\n\n      var adjust_axis = _dereq_('./adjust_axis');\n\n      var proj = _dereq_('./Proj');\n\n      var toPoint = _dereq_('./common/toPoint');\n\n      module.exports = function transform(source, dest, point) {\n        var wgs84;\n\n        if (Array.isArray(point)) {\n          point = toPoint(point);\n        }\n\n        function checkNotWGS(source, dest) {\n          return (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== \"WGS84\";\n        } // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n\n\n        if (source.datum && dest.datum && (checkNotWGS(source, dest) || checkNotWGS(dest, source))) {\n          wgs84 = new proj('WGS84');\n          transform(source, wgs84, point);\n          source = wgs84;\n        } // DGR, 2010/11/12\n\n\n        if (source.axis !== \"enu\") {\n          adjust_axis(source, false, point);\n        } // Transform source points to long/lat, if they aren't already.\n\n\n        if (source.projName === \"longlat\") {\n          point.x *= D2R; // convert degrees to radians\n\n          point.y *= D2R;\n        } else {\n          if (source.to_meter) {\n            point.x *= source.to_meter;\n            point.y *= source.to_meter;\n          }\n\n          source.inverse(point); // Convert Cartesian to longlat\n        } // Adjust for the prime meridian if necessary\n\n\n        if (source.from_greenwich) {\n          point.x += source.from_greenwich;\n        } // Convert datums if needed, and if possible.\n\n\n        point = datum_transform(source.datum, dest.datum, point); // Adjust for the prime meridian if necessary\n\n        if (dest.from_greenwich) {\n          point.x -= dest.from_greenwich;\n        }\n\n        if (dest.projName === \"longlat\") {\n          // convert radians to decimal degrees\n          point.x *= R2D;\n          point.y *= R2D;\n        } else {\n          // else project\n          dest.forward(point);\n\n          if (dest.to_meter) {\n            point.x /= dest.to_meter;\n            point.y /= dest.to_meter;\n          }\n        } // DGR, 2010/11/12\n\n\n        if (dest.axis !== \"enu\") {\n          adjust_axis(dest, true, point);\n        }\n\n        return point;\n      };\n    }, {\n      \"./Proj\": 2,\n      \"./adjust_axis\": 3,\n      \"./common/toPoint\": 23,\n      \"./datum_transform\": 31\n    }],\n    66: [function (_dereq_, module, exports) {\n      var D2R = 0.01745329251994329577;\n\n      var extend = _dereq_('./extend');\n\n      function mapit(obj, key, v) {\n        obj[key] = v.map(function (aa) {\n          var o = {};\n          sExpr(aa, o);\n          return o;\n        }).reduce(function (a, b) {\n          return extend(a, b);\n        }, {});\n      }\n\n      function sExpr(v, obj) {\n        var key;\n\n        if (!Array.isArray(v)) {\n          obj[v] = true;\n          return;\n        } else {\n          key = v.shift();\n\n          if (key === 'PARAMETER') {\n            key = v.shift();\n          }\n\n          if (v.length === 1) {\n            if (Array.isArray(v[0])) {\n              obj[key] = {};\n              sExpr(v[0], obj[key]);\n            } else {\n              obj[key] = v[0];\n            }\n          } else if (!v.length) {\n            obj[key] = true;\n          } else if (key === 'TOWGS84') {\n            obj[key] = v;\n          } else {\n            obj[key] = {};\n\n            if (['UNIT', 'PRIMEM', 'VERT_DATUM'].indexOf(key) > -1) {\n              obj[key] = {\n                name: v[0].toLowerCase(),\n                convert: v[1]\n              };\n\n              if (v.length === 3) {\n                obj[key].auth = v[2];\n              }\n            } else if (key === 'SPHEROID') {\n              obj[key] = {\n                name: v[0],\n                a: v[1],\n                rf: v[2]\n              };\n\n              if (v.length === 4) {\n                obj[key].auth = v[3];\n              }\n            } else if (['GEOGCS', 'GEOCCS', 'DATUM', 'VERT_CS', 'COMPD_CS', 'LOCAL_CS', 'FITTED_CS', 'LOCAL_DATUM'].indexOf(key) > -1) {\n              v[0] = ['name', v[0]];\n              mapit(obj, key, v);\n            } else if (v.every(function (aa) {\n              return Array.isArray(aa);\n            })) {\n              mapit(obj, key, v);\n            } else {\n              sExpr(v, obj[key]);\n            }\n          }\n        }\n      }\n\n      function rename(obj, params) {\n        var outName = params[0];\n        var inName = params[1];\n\n        if (!(outName in obj) && inName in obj) {\n          obj[outName] = obj[inName];\n\n          if (params.length === 3) {\n            obj[outName] = params[2](obj[outName]);\n          }\n        }\n      }\n\n      function d2r(input) {\n        return input * D2R;\n      }\n\n      function cleanWKT(wkt) {\n        if (wkt.type === 'GEOGCS') {\n          wkt.projName = 'longlat';\n        } else if (wkt.type === 'LOCAL_CS') {\n          wkt.projName = 'identity';\n          wkt.local = true;\n        } else {\n          if (_typeof(wkt.PROJECTION) === \"object\") {\n            wkt.projName = Object.keys(wkt.PROJECTION)[0];\n          } else {\n            wkt.projName = wkt.PROJECTION;\n          }\n        }\n\n        if (wkt.UNIT) {\n          wkt.units = wkt.UNIT.name.toLowerCase();\n\n          if (wkt.units === 'metre') {\n            wkt.units = 'meter';\n          }\n\n          if (wkt.UNIT.convert) {\n            if (wkt.type === 'GEOGCS') {\n              if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n                wkt.to_meter = parseFloat(wkt.UNIT.convert, 10) * wkt.DATUM.SPHEROID.a;\n              }\n            } else {\n              wkt.to_meter = parseFloat(wkt.UNIT.convert, 10);\n            }\n          }\n        }\n\n        if (wkt.GEOGCS) {\n          //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n          //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n          //}\n          if (wkt.GEOGCS.DATUM) {\n            wkt.datumCode = wkt.GEOGCS.DATUM.name.toLowerCase();\n          } else {\n            wkt.datumCode = wkt.GEOGCS.name.toLowerCase();\n          }\n\n          if (wkt.datumCode.slice(0, 2) === 'd_') {\n            wkt.datumCode = wkt.datumCode.slice(2);\n          }\n\n          if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n            wkt.datumCode = 'nzgd49';\n          }\n\n          if (wkt.datumCode === \"wgs_1984\") {\n            if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n              wkt.sphere = true;\n            }\n\n            wkt.datumCode = 'wgs84';\n          }\n\n          if (wkt.datumCode.slice(-6) === '_ferro') {\n            wkt.datumCode = wkt.datumCode.slice(0, -6);\n          }\n\n          if (wkt.datumCode.slice(-8) === '_jakarta') {\n            wkt.datumCode = wkt.datumCode.slice(0, -8);\n          }\n\n          if (~wkt.datumCode.indexOf('belge')) {\n            wkt.datumCode = \"rnb72\";\n          }\n\n          if (wkt.GEOGCS.DATUM && wkt.GEOGCS.DATUM.SPHEROID) {\n            wkt.ellps = wkt.GEOGCS.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n\n            if (wkt.ellps.toLowerCase().slice(0, 13) === \"international\") {\n              wkt.ellps = 'intl';\n            }\n\n            wkt.a = wkt.GEOGCS.DATUM.SPHEROID.a;\n            wkt.rf = parseFloat(wkt.GEOGCS.DATUM.SPHEROID.rf, 10);\n          }\n\n          if (~wkt.datumCode.indexOf('osgb_1936')) {\n            wkt.datumCode = \"osgb36\";\n          }\n        }\n\n        if (wkt.b && !isFinite(wkt.b)) {\n          wkt.b = wkt.a;\n        }\n\n        function toMeter(input) {\n          var ratio = wkt.to_meter || 1;\n          return parseFloat(input, 10) * ratio;\n        }\n\n        var renamer = function renamer(a) {\n          return rename(wkt, a);\n        };\n\n        var list = [['standard_parallel_1', 'Standard_Parallel_1'], ['standard_parallel_2', 'Standard_Parallel_2'], ['false_easting', 'False_Easting'], ['false_northing', 'False_Northing'], ['central_meridian', 'Central_Meridian'], ['latitude_of_origin', 'Latitude_Of_Origin'], ['latitude_of_origin', 'Central_Parallel'], ['scale_factor', 'Scale_Factor'], ['k0', 'scale_factor'], ['latitude_of_center', 'Latitude_of_center'], ['lat0', 'latitude_of_center', d2r], ['longitude_of_center', 'Longitude_Of_Center'], ['longc', 'longitude_of_center', d2r], ['x0', 'false_easting', toMeter], ['y0', 'false_northing', toMeter], ['long0', 'central_meridian', d2r], ['lat0', 'latitude_of_origin', d2r], ['lat0', 'standard_parallel_1', d2r], ['lat1', 'standard_parallel_1', d2r], ['lat2', 'standard_parallel_2', d2r], ['alpha', 'azimuth', d2r], ['srsCode', 'name']];\n        list.forEach(renamer);\n\n        if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === \"Lambert_Azimuthal_Equal_Area\")) {\n          wkt.long0 = wkt.longc;\n        }\n\n        if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n          wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n          wkt.lat_ts = wkt.lat1;\n        }\n      }\n\n      module.exports = function (wkt, self) {\n        var lisp = JSON.parse((\",\" + wkt).replace(/\\s*\\,\\s*([A-Z_0-9]+?)(\\[)/g, ',[\"$1\",').slice(1).replace(/\\s*\\,\\s*([A-Z_0-9]+?)\\]/g, ',\"$1\"]').replace(/,\\[\"VERTCS\".+/, ''));\n        var type = lisp.shift();\n        var name = lisp.shift();\n        lisp.unshift(['name', name]);\n        lisp.unshift(['type', type]);\n        lisp.unshift('output');\n        var obj = {};\n        sExpr(lisp, obj);\n        cleanWKT(obj.output);\n        return extend(self, obj.output);\n      };\n    }, {\n      \"./extend\": 34\n    }],\n    67: [function (_dereq_, module, exports) {\n      /**\n       * UTM zones are grouped, and assigned to one of a group of 6\n       * sets.\n       *\n       * {int} @private\n       */\n      var NUM_100K_SETS = 6;\n      /**\n       * The column letters (for easting) of the lower left value, per\n       * set.\n       *\n       * {string} @private\n       */\n\n      var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n      /**\n       * The row letters (for northing) of the lower left value, per\n       * set.\n       *\n       * {string} @private\n       */\n\n      var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n      var A = 65; // A\n\n      var I = 73; // I\n\n      var O = 79; // O\n\n      var V = 86; // V\n\n      var Z = 90; // Z\n\n      /**\n       * Conversion of lat/lon to MGRS.\n       *\n       * @param {object} ll Object literal with lat and lon properties on a\n       *     WGS84 ellipsoid.\n       * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n       *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n       * @return {string} the MGRS string for the given location and accuracy.\n       */\n\n      exports.forward = function (ll, accuracy) {\n        accuracy = accuracy || 5; // default accuracy 1m\n\n        return encode(LLtoUTM({\n          lat: ll[1],\n          lon: ll[0]\n        }), accuracy);\n      };\n      /**\n       * Conversion of MGRS to lat/lon.\n       *\n       * @param {string} mgrs MGRS string.\n       * @return {array} An array with left (longitude), bottom (latitude), right\n       *     (longitude) and top (latitude) values in WGS84, representing the\n       *     bounding box for the provided MGRS reference.\n       */\n\n\n      exports.inverse = function (mgrs) {\n        var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\n        if (bbox.lat && bbox.lon) {\n          return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n        }\n\n        return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n      };\n\n      exports.toPoint = function (mgrs) {\n        var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\n        if (bbox.lat && bbox.lon) {\n          return [bbox.lon, bbox.lat];\n        }\n\n        return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n      };\n      /**\n       * Conversion from degrees to radians.\n       *\n       * @private\n       * @param {number} deg the angle in degrees.\n       * @return {number} the angle in radians.\n       */\n\n\n      function degToRad(deg) {\n        return deg * (Math.PI / 180.0);\n      }\n      /**\n       * Conversion from radians to degrees.\n       *\n       * @private\n       * @param {number} rad the angle in radians.\n       * @return {number} the angle in degrees.\n       */\n\n\n      function radToDeg(rad) {\n        return 180.0 * (rad / Math.PI);\n      }\n      /**\n       * Converts a set of Longitude and Latitude co-ordinates to UTM\n       * using the WGS84 ellipsoid.\n       *\n       * @private\n       * @param {object} ll Object literal with lat and lon properties\n       *     representing the WGS84 coordinate to be converted.\n       * @return {object} Object literal containing the UTM value with easting,\n       *     northing, zoneNumber and zoneLetter properties, and an optional\n       *     accuracy property in digits. Returns null if the conversion failed.\n       */\n\n\n      function LLtoUTM(ll) {\n        var Lat = ll.lat;\n        var Long = ll.lon;\n        var a = 6378137.0; //ellip.radius;\n\n        var eccSquared = 0.00669438; //ellip.eccsq;\n\n        var k0 = 0.9996;\n        var LongOrigin;\n        var eccPrimeSquared;\n        var N, T, C, A, M;\n        var LatRad = degToRad(Lat);\n        var LongRad = degToRad(Long);\n        var LongOriginRad;\n        var ZoneNumber; // (int)\n\n        ZoneNumber = Math.floor((Long + 180) / 6) + 1; //Make sure the longitude 180.00 is in Zone 60\n\n        if (Long === 180) {\n          ZoneNumber = 60;\n        } // Special zone for Norway\n\n\n        if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n          ZoneNumber = 32;\n        } // Special zones for Svalbard\n\n\n        if (Lat >= 72.0 && Lat < 84.0) {\n          if (Long >= 0.0 && Long < 9.0) {\n            ZoneNumber = 31;\n          } else if (Long >= 9.0 && Long < 21.0) {\n            ZoneNumber = 33;\n          } else if (Long >= 21.0 && Long < 33.0) {\n            ZoneNumber = 35;\n          } else if (Long >= 33.0 && Long < 42.0) {\n            ZoneNumber = 37;\n          }\n        }\n\n        LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n        // in middle of\n        // zone\n\n        LongOriginRad = degToRad(LongOrigin);\n        eccPrimeSquared = eccSquared / (1 - eccSquared);\n        N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n        T = Math.tan(LatRad) * Math.tan(LatRad);\n        C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n        A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n        M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));\n        var UTMEasting = k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0;\n        var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0));\n\n        if (Lat < 0.0) {\n          UTMNorthing += 10000000.0; //10000000 meter offset for\n          // southern hemisphere\n        }\n\n        return {\n          northing: Math.round(UTMNorthing),\n          easting: Math.round(UTMEasting),\n          zoneNumber: ZoneNumber,\n          zoneLetter: getLetterDesignator(Lat)\n        };\n      }\n      /**\n       * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n       * class where the Zone can be specified as a single string eg.\"60N\" which\n       * is then broken down into the ZoneNumber and ZoneLetter.\n       *\n       * @private\n       * @param {object} utm An object literal with northing, easting, zoneNumber\n       *     and zoneLetter properties. If an optional accuracy property is\n       *     provided (in meters), a bounding box will be returned instead of\n       *     latitude and longitude.\n       * @return {object} An object literal containing either lat and lon values\n       *     (if no accuracy was provided), or top, right, bottom and left values\n       *     for the bounding box calculated according to the provided accuracy.\n       *     Returns null if the conversion failed.\n       */\n\n\n      function UTMtoLL(utm) {\n        var UTMNorthing = utm.northing;\n        var UTMEasting = utm.easting;\n        var zoneLetter = utm.zoneLetter;\n        var zoneNumber = utm.zoneNumber; // check the ZoneNummber is valid\n\n        if (zoneNumber < 0 || zoneNumber > 60) {\n          return null;\n        }\n\n        var k0 = 0.9996;\n        var a = 6378137.0; //ellip.radius;\n\n        var eccSquared = 0.00669438; //ellip.eccsq;\n\n        var eccPrimeSquared;\n        var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n        var N1, T1, C1, R1, D, M;\n        var LongOrigin;\n        var mu, phi1Rad; // remove 500,000 meter offset for longitude\n\n        var x = UTMEasting - 500000.0;\n        var y = UTMNorthing; // We must know somehow if we are in the Northern or Southern\n        // hemisphere, this is the only time we use the letter So even\n        // if the Zone letter isn't exactly correct it should indicate\n        // the hemisphere correctly\n\n        if (zoneLetter < 'N') {\n          y -= 10000000.0; // remove 10,000,000 meter offset used\n          // for southern hemisphere\n        } // There are 60 zones with zone 1 being at West -180 to -174\n\n\n        LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n        // in middle of\n        // zone\n\n        eccPrimeSquared = eccSquared / (1 - eccSquared);\n        M = y / k0;\n        mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n        phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu); // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n        N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n        T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n        C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n        R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n        D = x / (N1 * k0);\n        var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n        lat = radToDeg(lat);\n        var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n        lon = LongOrigin + radToDeg(lon);\n        var result;\n\n        if (utm.accuracy) {\n          var topRight = UTMtoLL({\n            northing: utm.northing + utm.accuracy,\n            easting: utm.easting + utm.accuracy,\n            zoneLetter: utm.zoneLetter,\n            zoneNumber: utm.zoneNumber\n          });\n          result = {\n            top: topRight.lat,\n            right: topRight.lon,\n            bottom: lat,\n            left: lon\n          };\n        } else {\n          result = {\n            lat: lat,\n            lon: lon\n          };\n        }\n\n        return result;\n      }\n      /**\n       * Calculates the MGRS letter designator for the given latitude.\n       *\n       * @private\n       * @param {number} lat The latitude in WGS84 to get the letter designator\n       *     for.\n       * @return {char} The letter designator.\n       */\n\n\n      function getLetterDesignator(lat) {\n        //This is here as an error flag to show that the Latitude is\n        //outside MGRS limits\n        var LetterDesignator = 'Z';\n\n        if (84 >= lat && lat >= 72) {\n          LetterDesignator = 'X';\n        } else if (72 > lat && lat >= 64) {\n          LetterDesignator = 'W';\n        } else if (64 > lat && lat >= 56) {\n          LetterDesignator = 'V';\n        } else if (56 > lat && lat >= 48) {\n          LetterDesignator = 'U';\n        } else if (48 > lat && lat >= 40) {\n          LetterDesignator = 'T';\n        } else if (40 > lat && lat >= 32) {\n          LetterDesignator = 'S';\n        } else if (32 > lat && lat >= 24) {\n          LetterDesignator = 'R';\n        } else if (24 > lat && lat >= 16) {\n          LetterDesignator = 'Q';\n        } else if (16 > lat && lat >= 8) {\n          LetterDesignator = 'P';\n        } else if (8 > lat && lat >= 0) {\n          LetterDesignator = 'N';\n        } else if (0 > lat && lat >= -8) {\n          LetterDesignator = 'M';\n        } else if (-8 > lat && lat >= -16) {\n          LetterDesignator = 'L';\n        } else if (-16 > lat && lat >= -24) {\n          LetterDesignator = 'K';\n        } else if (-24 > lat && lat >= -32) {\n          LetterDesignator = 'J';\n        } else if (-32 > lat && lat >= -40) {\n          LetterDesignator = 'H';\n        } else if (-40 > lat && lat >= -48) {\n          LetterDesignator = 'G';\n        } else if (-48 > lat && lat >= -56) {\n          LetterDesignator = 'F';\n        } else if (-56 > lat && lat >= -64) {\n          LetterDesignator = 'E';\n        } else if (-64 > lat && lat >= -72) {\n          LetterDesignator = 'D';\n        } else if (-72 > lat && lat >= -80) {\n          LetterDesignator = 'C';\n        }\n\n        return LetterDesignator;\n      }\n      /**\n       * Encodes a UTM location as MGRS string.\n       *\n       * @private\n       * @param {object} utm An object literal with easting, northing,\n       *     zoneLetter, zoneNumber\n       * @param {number} accuracy Accuracy in digits (1-5).\n       * @return {string} MGRS string for the given UTM location.\n       */\n\n\n      function encode(utm, accuracy) {\n        // prepend with leading zeroes\n        var seasting = \"00000\" + utm.easting,\n            snorthing = \"00000\" + utm.northing;\n        return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n      }\n      /**\n       * Get the two letter 100k designator for a given UTM easting,\n       * northing and zone number value.\n       *\n       * @private\n       * @param {number} easting\n       * @param {number} northing\n       * @param {number} zoneNumber\n       * @return the two letter 100k designator for the given UTM location.\n       */\n\n\n      function get100kID(easting, northing, zoneNumber) {\n        var setParm = get100kSetForZone(zoneNumber);\n        var setColumn = Math.floor(easting / 100000);\n        var setRow = Math.floor(northing / 100000) % 20;\n        return getLetter100kID(setColumn, setRow, setParm);\n      }\n      /**\n       * Given a UTM zone number, figure out the MGRS 100K set it is in.\n       *\n       * @private\n       * @param {number} i An UTM zone number.\n       * @return {number} the 100k set the UTM zone is in.\n       */\n\n\n      function get100kSetForZone(i) {\n        var setParm = i % NUM_100K_SETS;\n\n        if (setParm === 0) {\n          setParm = NUM_100K_SETS;\n        }\n\n        return setParm;\n      }\n      /**\n       * Get the two-letter MGRS 100k designator given information\n       * translated from the UTM northing, easting and zone number.\n       *\n       * @private\n       * @param {number} column the column index as it relates to the MGRS\n       *        100k set spreadsheet, created from the UTM easting.\n       *        Values are 1-8.\n       * @param {number} row the row index as it relates to the MGRS 100k set\n       *        spreadsheet, created from the UTM northing value. Values\n       *        are from 0-19.\n       * @param {number} parm the set block, as it relates to the MGRS 100k set\n       *        spreadsheet, created from the UTM zone. Values are from\n       *        1-60.\n       * @return two letter MGRS 100k code.\n       */\n\n\n      function getLetter100kID(column, row, parm) {\n        // colOrigin and rowOrigin are the letters at the origin of the set\n        var index = parm - 1;\n        var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n        var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index); // colInt and rowInt are the letters to build to return\n\n        var colInt = colOrigin + column - 1;\n        var rowInt = rowOrigin + row;\n        var rollover = false;\n\n        if (colInt > Z) {\n          colInt = colInt - Z + A - 1;\n          rollover = true;\n        }\n\n        if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {\n          colInt++;\n        }\n\n        if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {\n          colInt++;\n\n          if (colInt === I) {\n            colInt++;\n          }\n        }\n\n        if (colInt > Z) {\n          colInt = colInt - Z + A - 1;\n        }\n\n        if (rowInt > V) {\n          rowInt = rowInt - V + A - 1;\n          rollover = true;\n        } else {\n          rollover = false;\n        }\n\n        if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {\n          rowInt++;\n        }\n\n        if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {\n          rowInt++;\n\n          if (rowInt === I) {\n            rowInt++;\n          }\n        }\n\n        if (rowInt > V) {\n          rowInt = rowInt - V + A - 1;\n        }\n\n        var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n        return twoLetter;\n      }\n      /**\n       * Decode the UTM parameters from a MGRS string.\n       *\n       * @private\n       * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n       * @return {object} An object literal with easting, northing, zoneLetter,\n       *     zoneNumber and accuracy (in meters) properties.\n       */\n\n\n      function decode(mgrsString) {\n        if (mgrsString && mgrsString.length === 0) {\n          throw \"MGRSPoint coverting from nothing\";\n        }\n\n        var length = mgrsString.length;\n        var hunK = null;\n        var sb = \"\";\n        var testChar;\n        var i = 0; // get Zone number\n\n        while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {\n          if (i >= 2) {\n            throw \"MGRSPoint bad conversion from: \" + mgrsString;\n          }\n\n          sb += testChar;\n          i++;\n        }\n\n        var zoneNumber = parseInt(sb, 10);\n\n        if (i === 0 || i + 3 > length) {\n          // A good MGRS string has to be 4-5 digits long,\n          // ##AAA/#AAA at least.\n          throw \"MGRSPoint bad conversion from: \" + mgrsString;\n        }\n\n        var zoneLetter = mgrsString.charAt(i++); // Should we check the zone letter here? Why not.\n\n        if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n          throw \"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString;\n        }\n\n        hunK = mgrsString.substring(i, i += 2);\n        var set = get100kSetForZone(zoneNumber);\n        var east100k = getEastingFromChar(hunK.charAt(0), set);\n        var north100k = getNorthingFromChar(hunK.charAt(1), set); // We have a bug where the northing may be 2000000 too low.\n        // How\n        // do we know when to roll over?\n\n        while (north100k < getMinNorthing(zoneLetter)) {\n          north100k += 2000000;\n        } // calculate the char index for easting/northing separator\n\n\n        var remainder = length - i;\n\n        if (remainder % 2 !== 0) {\n          throw \"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString;\n        }\n\n        var sep = remainder / 2;\n        var sepEasting = 0.0;\n        var sepNorthing = 0.0;\n        var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n\n        if (sep > 0) {\n          accuracyBonus = 100000.0 / Math.pow(10, sep);\n          sepEastingString = mgrsString.substring(i, i + sep);\n          sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n          sepNorthingString = mgrsString.substring(i + sep);\n          sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n        }\n\n        easting = sepEasting + east100k;\n        northing = sepNorthing + north100k;\n        return {\n          easting: easting,\n          northing: northing,\n          zoneLetter: zoneLetter,\n          zoneNumber: zoneNumber,\n          accuracy: accuracyBonus\n        };\n      }\n      /**\n       * Given the first letter from a two-letter MGRS 100k zone, and given the\n       * MGRS table set for the zone number, figure out the easting value that\n       * should be added to the other, secondary easting value.\n       *\n       * @private\n       * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n       * @param {number} set The MGRS table set for the zone number.\n       * @return {number} The easting value for the given letter and set.\n       */\n\n\n      function getEastingFromChar(e, set) {\n        // colOrigin is the letter at the origin of the set for the\n        // column\n        var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n        var eastingValue = 100000.0;\n        var rewindMarker = false;\n\n        while (curCol !== e.charCodeAt(0)) {\n          curCol++;\n\n          if (curCol === I) {\n            curCol++;\n          }\n\n          if (curCol === O) {\n            curCol++;\n          }\n\n          if (curCol > Z) {\n            if (rewindMarker) {\n              throw \"Bad character: \" + e;\n            }\n\n            curCol = A;\n            rewindMarker = true;\n          }\n\n          eastingValue += 100000.0;\n        }\n\n        return eastingValue;\n      }\n      /**\n       * Given the second letter from a two-letter MGRS 100k zone, and given the\n       * MGRS table set for the zone number, figure out the northing value that\n       * should be added to the other, secondary northing value. You have to\n       * remember that Northings are determined from the equator, and the vertical\n       * cycle of letters mean a 2000000 additional northing meters. This happens\n       * approx. every 18 degrees of latitude. This method does *NOT* count any\n       * additional northings. You have to figure out how many 2000000 meters need\n       * to be added for the zone letter of the MGRS coordinate.\n       *\n       * @private\n       * @param {char} n Second letter of the MGRS 100k zone\n       * @param {number} set The MGRS table set number, which is dependent on the\n       *     UTM zone number.\n       * @return {number} The northing value for the given letter and set.\n       */\n\n\n      function getNorthingFromChar(n, set) {\n        if (n > 'V') {\n          throw \"MGRSPoint given invalid Northing \" + n;\n        } // rowOrigin is the letter at the origin of the set for the\n        // column\n\n\n        var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n        var northingValue = 0.0;\n        var rewindMarker = false;\n\n        while (curRow !== n.charCodeAt(0)) {\n          curRow++;\n\n          if (curRow === I) {\n            curRow++;\n          }\n\n          if (curRow === O) {\n            curRow++;\n          } // fixing a bug making whole application hang in this loop\n          // when 'n' is a wrong character\n\n\n          if (curRow > V) {\n            if (rewindMarker) {\n              // making sure that this loop ends\n              throw \"Bad character: \" + n;\n            }\n\n            curRow = A;\n            rewindMarker = true;\n          }\n\n          northingValue += 100000.0;\n        }\n\n        return northingValue;\n      }\n      /**\n       * The function getMinNorthing returns the minimum northing value of a MGRS\n       * zone.\n       *\n       * Ported from Geotrans' c Lattitude_Band_Value structure table.\n       *\n       * @private\n       * @param {char} zoneLetter The MGRS zone to get the min northing for.\n       * @return {number}\n       */\n\n\n      function getMinNorthing(zoneLetter) {\n        var northing;\n\n        switch (zoneLetter) {\n          case 'C':\n            northing = 1100000.0;\n            break;\n\n          case 'D':\n            northing = 2000000.0;\n            break;\n\n          case 'E':\n            northing = 2800000.0;\n            break;\n\n          case 'F':\n            northing = 3700000.0;\n            break;\n\n          case 'G':\n            northing = 4600000.0;\n            break;\n\n          case 'H':\n            northing = 5500000.0;\n            break;\n\n          case 'J':\n            northing = 6400000.0;\n            break;\n\n          case 'K':\n            northing = 7300000.0;\n            break;\n\n          case 'L':\n            northing = 8200000.0;\n            break;\n\n          case 'M':\n            northing = 9100000.0;\n            break;\n\n          case 'N':\n            northing = 0.0;\n            break;\n\n          case 'P':\n            northing = 800000.0;\n            break;\n\n          case 'Q':\n            northing = 1700000.0;\n            break;\n\n          case 'R':\n            northing = 2600000.0;\n            break;\n\n          case 'S':\n            northing = 3500000.0;\n            break;\n\n          case 'T':\n            northing = 4400000.0;\n            break;\n\n          case 'U':\n            northing = 5300000.0;\n            break;\n\n          case 'V':\n            northing = 6200000.0;\n            break;\n\n          case 'W':\n            northing = 7000000.0;\n            break;\n\n          case 'X':\n            northing = 7900000.0;\n            break;\n\n          default:\n            northing = -1.0;\n        }\n\n        if (northing >= 0.0) {\n          return northing;\n        } else {\n          throw \"Invalid zone letter: \" + zoneLetter;\n        }\n      }\n    }, {}],\n    68: [function (_dereq_, module, exports) {\n      module.exports = {\n        \"name\": \"proj4\",\n        \"version\": \"2.3.14\",\n        \"description\": \"Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations.\",\n        \"main\": \"lib/index.js\",\n        \"directories\": {\n          \"test\": \"test\",\n          \"doc\": \"docs\"\n        },\n        \"scripts\": {\n          \"test\": \"./node_modules/istanbul/lib/cli.js test ./node_modules/mocha/bin/_mocha test/test.js\"\n        },\n        \"repository\": {\n          \"type\": \"git\",\n          \"url\": \"git://github.com/proj4js/proj4js.git\"\n        },\n        \"author\": \"\",\n        \"license\": \"MIT\",\n        \"jam\": {\n          \"main\": \"dist/proj4.js\",\n          \"include\": [\"dist/proj4.js\", \"README.md\", \"AUTHORS\", \"LICENSE.md\"]\n        },\n        \"devDependencies\": {\n          \"grunt-cli\": \"~0.1.13\",\n          \"grunt\": \"~0.4.2\",\n          \"grunt-contrib-connect\": \"~0.6.0\",\n          \"grunt-contrib-jshint\": \"~0.8.0\",\n          \"chai\": \"~1.8.1\",\n          \"mocha\": \"~1.17.1\",\n          \"grunt-mocha-phantomjs\": \"~0.4.0\",\n          \"browserify\": \"~12.0.1\",\n          \"grunt-browserify\": \"~4.0.1\",\n          \"grunt-contrib-uglify\": \"~0.11.1\",\n          \"curl\": \"git://github.com/cujojs/curl.git\",\n          \"istanbul\": \"~0.2.4\",\n          \"tin\": \"~0.4.0\"\n        },\n        \"dependencies\": {\n          \"mgrs\": \"~0.0.2\"\n        }\n      };\n    }, {}],\n    \"./includedProjections\": [function (_dereq_, module, exports) {\n      module.exports = _dereq_('hTEDpn');\n    }, {}],\n    \"hTEDpn\": [function (_dereq_, module, exports) {\n      var projs = [_dereq_('./lib/projections/tmerc'), _dereq_('./lib/projections/utm'), _dereq_('./lib/projections/sterea'), _dereq_('./lib/projections/stere'), _dereq_('./lib/projections/somerc'), _dereq_('./lib/projections/omerc'), _dereq_('./lib/projections/lcc'), _dereq_('./lib/projections/krovak'), _dereq_('./lib/projections/cass'), _dereq_('./lib/projections/laea'), _dereq_('./lib/projections/aea'), _dereq_('./lib/projections/gnom'), _dereq_('./lib/projections/cea'), _dereq_('./lib/projections/eqc'), _dereq_('./lib/projections/poly'), _dereq_('./lib/projections/nzmg'), _dereq_('./lib/projections/mill'), _dereq_('./lib/projections/sinu'), _dereq_('./lib/projections/moll'), _dereq_('./lib/projections/eqdc'), _dereq_('./lib/projections/vandg'), _dereq_('./lib/projections/aeqd')];\n\n      module.exports = function (proj4) {\n        projs.forEach(function (proj) {\n          proj4.Proj.projections.add(proj);\n        });\n      };\n    }, {\n      \"./lib/projections/aea\": 40,\n      \"./lib/projections/aeqd\": 41,\n      \"./lib/projections/cass\": 42,\n      \"./lib/projections/cea\": 43,\n      \"./lib/projections/eqc\": 44,\n      \"./lib/projections/eqdc\": 45,\n      \"./lib/projections/gnom\": 47,\n      \"./lib/projections/krovak\": 48,\n      \"./lib/projections/laea\": 49,\n      \"./lib/projections/lcc\": 50,\n      \"./lib/projections/mill\": 53,\n      \"./lib/projections/moll\": 54,\n      \"./lib/projections/nzmg\": 55,\n      \"./lib/projections/omerc\": 56,\n      \"./lib/projections/poly\": 57,\n      \"./lib/projections/sinu\": 58,\n      \"./lib/projections/somerc\": 59,\n      \"./lib/projections/stere\": 60,\n      \"./lib/projections/sterea\": 61,\n      \"./lib/projections/tmerc\": 62,\n      \"./lib/projections/utm\": 63,\n      \"./lib/projections/vandg\": 64\n    }]\n  }, {}, [36])(36);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Map/Leaflet/proj4.js\n");

/***/ })

})